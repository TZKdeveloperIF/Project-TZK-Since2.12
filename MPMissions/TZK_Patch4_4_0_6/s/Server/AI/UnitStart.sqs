; args: [unit, si, gi]

? !isServer : exit

_unit = _this select 0; _si = _this select 1; _gi = _this select 2

? _si != si0 && _si != si1: exit
? !((group _unit) in (groupMatrix select _si)): exit
? leader _unit == player: exit
; wait for unit/vehicle data
_delay = 4
~ (5 - _delay)

? !(alive _unit) : exit
; disableAI if needed.
_unit allowFleeing 0
;_unit setCombatMode "YELLOW"; _unit setBehaviour "AWARE"; _unit setSpeedMode "FULL"
_unit setCombatMode (aisCombatModeDefs select (aiSetting select _si select _gi select aisCombatMode))
(group _unit) setBehaviour (aisBehaviourDefs select (aiSetting select _si select _gi select aisBehaviour)); _unit setSpeedMode "FULL"

; wait until leader alive.
# LeaderAliveWait
~ _delay
? !alive leader _unit: goto "LeaderAliveWait"

_vehicle = vehicle _unit

; SUPPORT
? _unit == _vehicle : goto "SkipSupport"
_vt = _vehicle call funcGetUnitTypeFromObject
? _vt == -1 : format ["ERROR: Vehicle type not found in AI Start sqs script for '%1', treat it as non-support vehicle.", _vehicle] call fDebugLog; goto "SkipSupport"
? (groupCommander select _si) in (groupAiMatrix select _si) : if (_vt in (typesSupport select _si) && _unit == driver _vehicle) then {[_unit, _si, _gi] exec (TzkScripts select 301); exit}
# SkipSupport

; type initial commands?
; Set crew/AACrew/Pilot "RTS stop"
? _vehicle != _unit: goto "SkipStopCrew"
_vt = _vehicle call funcGetUnitTypeFromObject
? not (_vt in typesCrew): goto "SkipStopCrew"
	[[call (_unit call funcGenNetIdStr)], 0, "hStop.sqs", "Order"] exec "Rts\Framework\Distributor.sqs"
	exit
# SkipStopCrew

; Disengage for light/heavy tank and artillery
_vehicle = vehicle _unit
_vt = _vehicle call funcGetUnitTypeFromObject
? _vt in typesLightTank || _vt in typesHeavyTank || _vt in typesHowitzer || _vt in typesRocketLauncher: _unit disableAI "TARGET"

; RALLY 1
? groupMatrix select _si select _gi != group _unit: _gi = (groupMatrix select _si) find (group _unit)
? (aiSetting select _si select _gi select aisRallyPoint1) == 0 || _unit != driver _vehicle : goto "NoRally1"
? !(_unit call busyCheck): _unit call busySet
[_unit, _si, _gi, time + 10*60, aisRallyPoint1] exec (TzkScripts select 302)
# WaitRallyReached1
	~ 5
	? !(alive _unit) : exit
	? _unit call rtsOrderCheck: exit
	? _unit call busyCheck : goto "WaitRallyReached1"
# NoRally1

; BOARD 1
? groupMatrix select _si select _gi != group _unit: _gi = (groupMatrix select _si) find (group _unit)
? _unit != _vehicle || (aiSetting select _si select _gi select aisPickupWait1) == 0 : goto "NoBoard1"
_timeCheckBoardStart = time
_posCheckBoardStart = getPos _unit
# Board1
? !(_unit call busyCheck): _unit call busySet
_param = [false, [_unit, _si, _gi, _posCheckBoardStart, _timeCheckBoardStart, aisPickupWait1]]
_param exec (TzkScripts select 303)
# WaitBoardReady1
	~ 5
	? !(alive _unit) : exit
	? _unit call rtsOrderCheck: exit
	? not (_param select 0): goto "WaitBoardReady1"
? time > _timeCheckBoardStart + (aisPickupWaitTimeDefs select (aiSetting select _si select (( groupMatrix select _si) find (group _unit)) select aisPickupWait1)): goto "NoBoard1"
? ([getPos _unit, _posCheckBoardStart] call funcDistH) > 200: goto "NoBoard1"
goto "Board1"
# NoBoard1

;*************************Second Rally And Board Procedure**************************
; RALLY 2
? groupMatrix select _si select _gi != group _unit: _gi = (groupMatrix select _si) find (group _unit)
? (aiSetting select _si select _gi select aisRallyPoint2) == 0 || _unit != driver _vehicle : goto "NoRally2"
? !(_unit call busyCheck): _unit call busySet
[_unit, _si, _gi, time + 10*60, aisRallyPoint2] exec (TzkScripts select 302)
# WaitRallyReached2
	~5
	? !(alive _unit) : exit
	? _unit call rtsOrderCheck: exit
	? _unit call busyCheck : goto "WaitRallyReached2"
# NoRally2

; BOARD 2
? groupMatrix select _si select _gi != group _unit: _gi = (groupMatrix select _si) find (group _unit)
? _unit != _vehicle || (aiSetting select _si select _gi select aisPickupWait2) == 0 : goto "NoBoard2"
_timeCheckBoardStart = time
_posCheckBoardStart = getPos _unit
# Board2
? !(_unit call busyCheck): _unit call busySet
_param = [false, [_unit, _si, _gi, _posCheckBoardStart, _timeCheckBoardStart, aisPickupWait2]]
_param exec (TzkScripts select 303)
# WaitBoardReady2
	~ 5
	? !(alive _unit) : exit
	? _unit call rtsOrderCheck: exit
	? not (_param select 0): goto "WaitBoardReady2"
? time > _timeCheckBoardStart + (aisPickupWaitTimeDefs select (aiSetting select _si select (( groupMatrix select _si) find (group _unit)) select aisPickupWait2)): goto "NoBoard2"
? ([getPos _unit, _posCheckBoardStart] call funcDistH) > 200: goto "NoBoard2"
goto "Board2"
# NoBoard2

? groupMatrix select _si select _gi != group _unit: _gi = (groupMatrix select _si) find (group _unit)
_order = (orderMatrix select _si) select _gi
_script = (orderDefs select (_order select 1)) select 2
[_unit, _si, _gi, _order select 2] exec format ["%1", _script]