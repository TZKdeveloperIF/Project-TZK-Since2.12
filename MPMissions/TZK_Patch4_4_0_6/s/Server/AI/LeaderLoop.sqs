; args: [_unit, _si, _gi, bind, _idOrder, _indexCombatMode, _indexBehaviour]

_unit = _this select 0
_si = _this select 1
_gi = _this select 2

_group = (groupMatrix select _si) select _gi

? _group == (groupCommander select _si) : _this exec (TzkScripts select 296); exit

_idOrder = _this select 4
_indexCombatMode = _this select 5
_indexBehaviour = _this select 6
_this = 0
; Refresh members' order script when each new loop started.
_order = orderMatrix select _si select _gi; _order set [0, (_order select 0) + 1]
_setting = aiSetting select _si select _gi

_unitsStarted = units _group
_funcGetSlots = preprocessFile "Server\SQF\AiGroupSlots.sqf"
_factories = []; _assignedFacs = []
_autoBuyFactories = AutoBuyInfo select _si select _gi select 0
_autoBuyTypeEntry = AutoBuyInfo select _si select _gi select 1
_autoBuyNums = AutoBuyInfo select _si select _gi select 2
_lambda = "false", _lambdaInited = false
; local variables pool
_emptyArr = []
_grpBuyOrders = []
	; this index value should keep same as defined in (TzkScripts select 003)
	_idxOfOrderRef = 3

~ 5
# Update
	? !(alive _unit): goto "WaitUntilAlive"
	
	; check if he has become CO (all players on his side has left the game)
	? _group == (groupCommander select _si) : [_unit, _si, _gi] exec (TzkScripts select 296); exit
	
	; check if some unit has joined to other groups
	_unitsStarted = _unitsStarted - (_unitsStarted - (units _group))
	
	; check for new order
	? _idOrder == _order select 0 : goto "NoNewOrder"
	_idOrder = _order select 0
	_script = (orderDefs select (_order select 1)) select 2
	{ if (alive _x) then { [_x, _si, _gi, _order select 2] exec format["%1", _script] } } foreach _unitsStarted
	
	#NoNewOrder
	; start ai for new units
	_unitsStarted = _unitsStarted - [objNull]
	_unitsStart = (units _group) - _unitsStarted
	{ _unitsStarted set [count _unitsStarted, _x] } foreach _unitsStart
	
	; check for new CombatMode and Behaviour setting
	? _indexCombatMode == _setting select aisCombatMode: goto "SkipCombatMode"
	_indexCombatMode = _setting select aisCombatMode
	{ if !(_x call busyCheck) then {_x setCombatMode (aisCombatModeDefs select _indexCombatMode)} } foreach _unitsStarted
	#SkipCombatMode	
	? _indexBehaviour == _setting select aisBehaviour && behaviour _unit == (aisBehaviourDefs select _indexBehaviour) : goto "SkipBehaviour"
	_indexBehaviour = _setting select aisBehaviour
	_group setBehaviour (aisBehaviourDefs select _indexBehaviour)
	#SkipBehaviour

	_money = (groupMoneyMatrix select _si) select _gi
	_KeepMax = aisKeepDefs select (_setting select aisKeepMax)
	? _money > _KeepMax : _tax = _money - _KeepMax; [_si, _gi, [_si, _gi] call loadFile "Util\GetSuperiorIdx.sqf", _tax] exec (TzkScripts select 168); goto "Sleep"

	_hasAutoBuyTypes = false; {if (_x != -1) then {_hasAutoBuyTypes = true}} forEach _autoBuyTypeEntry
	? _hasAutoBuyTypes: goto "CheckBuyUnit"

	# Sleep
	~5
	goto "Update"

# WaitUntilAlive
	@ alive leader _group
	_unit = leader _group
	_unit call preprocessFile "Server\SQF\RtsOrderClear.sqf"

	[_unit, _si, 200] exec (TzkScripts select 039)
	[_unit, _si, _gi] exec "Server\EventAdd_Infantry.sqs"
	[_unit, _si, kaUnit, -1] exec (TzkScripts select 218)
	
	_money = (groupMoneyMatrix select _si) select _gi

	? _money >= costRespawn : goto "Respawn"
#WaitMoney
	_unit setPos [-2000 + _si*100, -2000 + _gi*100, 1000]
	; _unit setPos [(posCenter select 0) + _si*100, (posCenter select 1) + _gi*100, 1000]
	_unit setVelocity [0,0,0]
	~1
	_money = (groupMoneyMatrix select _si) select _gi
	? _money < costRespawn : goto "WaitMoney"

#Respawn
	_unit call busyClear
	? costRespawn > 0 : [_si, _gi, costRespawn] exec (TzkScripts select 167)
	_objectRespawn = objNull
	
	; read data from AI Setting
	? (_setting select aisRespawn) == 0 : goto "RespawnOldFashion"
	_respawnNum = (_setting select aisRespawn) % 4
	? _respawnNum == 0 : _respawnNum = 4
	_respawnType = ( (_setting select aisRespawn) - _respawnNum ) / 4
	
	_ts = structsRespawn select _respawnType	
	_workingStructures = [_si, _ts] call funcGetWorkingStructures; 
	
	if !(count _workingStructures < _respawnNum) then { _objectRespawn = _workingStructures select (_respawnNum - 1); goto "RespawnStruct" }
	
	# RespawnOldFashion
	_objectRespawn = sideRespawnObjects select _si
	? !(alive _objectRespawn) : _objectRespawn = [_objectRespawn, _si] call funcGetNearestRespawnObject

	_ts = _objectRespawn call funcGetStructTypeFromObject
	? _ts != -1 : goto "RespawnStruct"

; RespawnMHQMCV
	_objectRespawn = mhq select _si
	_dir = getDir _objectRespawn
	_pos = getPos _objectRespawn
	_posRespawn = [(_pos select 0) - (sin _dir) * 10, (_pos select 1) - (cos _dir) * 10, 0]
	? !(alive _objectRespawn) : _posRespawn = positionRespawn
	goto "RespawnPosSet"

# RespawnStruct
	_res = [_objectRespawn, _ts, _si] call funcCalcUnitPlacementPosDir
	_posRespawn = _res select 0
	? !(alive _objectRespawn) : _posRespawn = positionRespawn

# RespawnPosSet
	? (_posRespawn select 2) < 3: _posRespawn set [2, 3]
	_unit setVelocity [0,0,0]
	_unit setPos _posRespawn

	[_unit, _si] exec (TzkScripts select 005)

	unassignVehicle _unit
	
	[_unit] exec (TzkScripts select 072)
	[_unit, _si, _gi] exec (TzkScripts select 299); 

	goto "Update"
	
# CheckBuyUnit
	call preprocessFile "Server\Loop\AutoBuyRemInvOrder.sqf"

	_KeepMin = aisKeepDefs select (_setting select aisKeepMin)
	? _money <= _KeepMin: goto "Sleep"
	_slots = maxGroupSize - (count units _group + (groupUnitsBuildingMatrix select _si select _gi))
	? _slots <= 0: goto "Sleep"
	_groupSize = _setting select aisGroupSize
	? _groupSize == 1: goto "Sleep"
	? _groupSize > 1 && _groupSize < maxGroupSize: _slots = [_si, _gi, _groupSize] call _funcGetSlots; if (_slots <= 0) then {goto "Sleep"}

	_typeInfos = [_autoBuyTypeEntry, _autoBuyNums, _slots] call loadFile (TzkScripts select 306)
	? count _typeInfos <= 0: goto "Sleep"

	_typeInfos call loadFile (TzkScripts select 305)

	goto "Sleep"