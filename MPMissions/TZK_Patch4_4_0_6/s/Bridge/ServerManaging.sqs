; args: bridge project
_project = _this

_funcGenerator = preprocessFile "Bridge\InfoFunc.sqf"
	_funcGetValid = "GetValidStatus" call _funcGenerator
	_funcGetId = "GetId" call _funcGenerator
	_funcGetSi = "GetSi" call _funcGenerator
	_funcBridgeGetPos = "BridgeGetPosASL" call _funcGenerator
	_funcBridgeGetVec = "BridgeGet3dVec" call _funcGenerator
	_funcBridgeGetObj = "BridgeGetObj" call _funcGenerator

_headInfo = _project call ("GetHeadInfo" call _funcGenerator)
_bridgesInfo = _project call ("GetBridgeInfo" call _funcGenerator)

_id = _headInfo call _funcGetId
_si = _headInfo call _funcGetSi

_interval = 5
_nearbyVehiclesParamCache = [[], 150, ([[utMHQ0], [utMHQ1]] select _si) + [typesEngineeringVeh select _si], []]
_cost = structDefs select stBridge select sdCost
_funcEngineerVehiclesWork = preprocessFile "\TZK_Patch4_4_0_6\s\Bridge\NearbyEngineerVehicleWork.sqf"

_c = _headInfo call ("GetSegmentCnt" call _funcGenerator)
# loop
	? not (_headInfo call _funcGetValid): goto "Quit"
	? _id != (_headInfo call _funcGetId): goto "Quit"

	_i = 0
	# ergodicBridge
		; use null check but not alive check. bridge can be repaired by mhq/sup, but not so convenient
		; one can't simply remove dead but existed bridge and auto build a new one
		? not isNull ([_bridgesInfo, _i] call _funcBridgeGetObj): goto "continue"
		? (groupMoneyMatrix select _si select (giCO select _si)) < _cost: goto "continue"

		_nearbyVehiclesParamCache set [0, [_bridgesInfo, _i] call _funcBridgeGetPos]
		_res = _nearbyVehiclesParamCache call funcGetNearbyVehicles
		? count _res <= 0: goto "continue"
		_res call _funcEngineerVehiclesWork

		[_si, giCO select _si, _cost] exec localize {TZK_MONEY_SERVER_SPEND}
		[[_si, giCO select _si], [[_bridgesInfo, _i] call _funcBridgeGetPos, [_bridgesInfo, _i] call _funcBridgeGetVec], [_bridgesInfo, _id, _i]] exec "Bridge\Build.sqs"

		# continue
		_i = _i + 1
		? _i < _c: goto "ergodicBridge"

	~ _interval
	goto "loop"

# Quit
	exit