; args: [output status (write only), input status (read only), [vehice, start pos, end pos, speed (km/h)]]

; this SQS script loops to move vehicle using "setVelocity" command
; on script finished/aborted, the output status will be set to "false"
; if input status is false, current order should be interrupted and halt
; do in-script exit check ONLY for those conditions whose parameters are local
; no other in-script exit check
; it is possible but unnecessary to use only one status variable

_param = _this select 2
_vehicle = _param select 0
_startPos = _param select 1
_endPos = _param select 2
; "speed" uses km/h while "velocity" uses m/s
_speed = (_param select 3) / 3.6

_vehicle doWatch _endPos

? not (_this select 1): goto "EOF"

_unitVector = ([_endPos, _startPos] call funcVectorSub) call preprocessFile "Math\UnitVector.sqf"
_vehicle setVectorDir _unitVector

_moveVelocity = [_unitVector, _speed] call funcVectorScale

_inHalfPlane = preprocessFile "Math\InHalfPlane.sqf"

_up = [0, 0, 1]
_outSeaPos = [-500 - random(500), +500 + random(500), 100]
; P.S. In high frequency script, read pos after set pos in short time may sometimes return old pos value.
; (not verifyed yet. Sometimes attached MHQ get lost. The core reason might be this.)
; Thus better use script variable instead of read pos
_currentPosAsl = getPosASL _vehicle; _currentVel = velocity _vehicle

; move to sea and move back. Initial
_vehicle setPosASL _outSeaPos; _vehicle setVelocity _currentVel
~ 0.01
_vehicle setPosASL _currentPosAsl; _vehicle setVelocity _currentVel
~ 0.01

# loop
	_interval = 0.1; _checkReachThreshold = 10; _resetPosThreshold = 50
	; ASSERT(_checkReachThreshold <= _resetPosThreshold)
	_counter = _resetPosThreshold -_checkReachThreshold
	_beginTime = _time
	_movedVector = [_currentPosAsl, _startPos] call funcVectorSub
	_beginExpectedPos = [[_unitVector, [_movedVector, _unitVector] call funcVectorDot] call funcVectorScale, _startPos] call funcVectorAdd

	; need update position variable. Delay enough to make sure read-pos command obtains correct result
	~ 0.1

	# frequentlyLoop
		_counter = _counter + 1

		_currentPosAsl = getPosASL _vehicle
		_movedVector = [_currentPosAsl, _startPos] call funcVectorSub
		_expectedPos = [[_unitVector, [_movedVector, _unitVector] call funcVectorDot] call funcVectorScale, _startPos] call funcVectorAdd
		; correction require a bit bigger coef
		_correction = [[_expectedPos, _currentPosAsl] call funcVectorSub, 2] call funcVectorScale
		_correctedVel = [_moveVelocity, _correction] call funcVectorAdd

		_vehicle setVectorDir _correctedVel
		_vehicle setVectorUp _up
		_vehicle setVelocity _correctedVel

		? _counter % _checkReachThreshold != 0: goto "skipReachCheck"
		; reach check
			? not (_this select 1): goto "EOF"
			? not alive _vehicle: goto "EOF"

			? [_currentPosAsl, _endPos, _unitVector] call _inHalfPlane: goto "Reached"
			? [_currentPosAsl, _endPos] call funcDistH < 5: goto "Reached"

		# skipReachCheck

		~ _interval
		? _counter < _resetPosThreshold: goto "frequentlyLoop"

	; remove reset position design in-loop. Buggy better than laggy
	
	_vehicle doWatch _endPos

	? not (_this select 1): goto "EOF"
	? not alive _vehicle: goto "EOF"

	? [_currentPosAsl, _endPos, _unitVector] call _inHalfPlane: goto "Reached"
	? [_currentPosAsl, _endPos] call funcDistH < 5: goto "Reached"
	goto "loop"

# Reached

# EOF
	_this set [0, false]