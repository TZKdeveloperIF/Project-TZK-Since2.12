; args: [unit, exit condition?: string]
; no parameters' check

_unit = _this select 0
_cond = (if (count _this > 1) then {_this select 1} else {"false"})

_vehicle = vehicle _unit

_unit groupChat "Roger, landing helicopter."
_vehicle land {LAND}

_timeAbort = _time + 60, _maxRetryTime = 4, _retry = 0
# simpleLoop
	_vehicle land {LAND}

	? not alive _unit: exit
	? call _cond: exit
	? _vehicle != vehicle _unit: exit
	? _time > _timeAbort: exit

	~ 5
	? (getPos _vehicle) select 2 > 8: goto "simpleLoop"

# advancedLoop
	_vehicle land {LAND}

	? not alive _unit: exit
	? call _cond: exit
	? _vehicle != vehicle _unit: exit
	? _time > _timeAbort: exit

	~ 0.5
	? (getPos _vehicle) select 2 > 3: goto "advancedLoop"

? _unit != driver _vehicle: exit
doStop _unit; _unit action ["ENGINEOFF", _vehicle]; _vehicle engineOn false

_timeAbort = _time + 5
# preventEscape
	~ 0.5
	? (velocity _vehicle) select 2 > 2: goto "retry"
	? _time < _timeAbort: goto "preventEscape"
? (getPos _vehicle) select 2 < 5: goto "LandSucceeded"

# retry
	_retry = _retry + 1
	_timeAbort = _time + 60
	? _retry >= _maxRetryTime: _unit groupChat "Land order aborted.", exit
	if ((getPos _vehicle) select 2 > 8) then {goto "simpleLoop"} else {goto "advancedLoop"}

# LandSucceeded
	unassignVehicle _unit
	_unit action ["ENGINEOFF", _vehicle]; _vehicle engineOn false
	_unit action ["GETOUT", _vehicle]
	~ 0.1
	doStop _unit
	~ 0.1
	_unit assignAsDriver _vehicle; _unit action ["GETIN DRIVER", _vehicle]
	_unit groupChat "Landed"