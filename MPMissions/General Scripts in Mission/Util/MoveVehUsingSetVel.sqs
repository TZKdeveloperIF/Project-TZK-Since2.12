; args: [output status (write only), input status (read only), [vehice, pos, speed (km/h), force speed type, cross bridge: bool]]

; this SQS script loops to move vehicle using "setVelocity" command
; on script finished/aborted, the output status will be set to "false"
; if input status is false, current order should be interrupted and halt
; do in-script exit check ONLY for those conditions whose parameters are local
; no other in-script exit check
; it is possible but unnecessary to use only one status variable

_param = _this select 2
_vehicle = _param select 0
_dest = _param select 1
; "speed" uses km/h while "velocity" uses m/s
_speed = (_param select 2) / 3.6
_forceSpdType = _param select 3
_crossBrdige = _param select 4

? count _dest < 3: _dest set [2, _dest call funcHASL]

? not _crossBrdige: goto "ReadyCheckFinished"
; Need to wait all units in vehicle "ready", otherwise vehicle won't keep their direction as expected
; However no available script command to remove "move" status ordered by player directly
; we can only wait in script
_counter = 0
_vehicle doMove getPos _vehicle
# ReadyLoop
	_counter = _counter + 1

	_crews = crew _vehicle, _b = true, {if not (unitReady _x) then {_b = false}} forEach _crews
	? not _b && 2 == _counter % 5: {_x doFollow leader _x} forEach _crews
	? not _b && 19 == _counter % 20: _vehicle groupChat "Stuck in crossing bridge. Order 'fall back into formation' to free me."
	~ 0.5

	? count _crews <= 0: goto "EOF"
	? not (_this select 1): goto "EOF"
	? not alive _vehicle: goto "EOF"
	? not _b: goto "ReadyLoop"

# ReadyCheckFinished

_vehicle doWatch _dest

? not (_this select 1): goto "EOF"

_delta = [_dest, getPosASL _vehicle] call funcVectorSub
_delta = [_delta, 1 / (_delta call funcVectorLength)] call funcVectorScale
_vehicle setVectorDir _delta

_inHalfPlane = preprocessFile "Math\InHalfPlane.sqf"

_counter = 0
# loop
	_counter = _counter + 1
	_moveSpd = (abs(speed _vehicle) + 10) / 3.6
	? _speed < _moveSpd || _crossBrdige: _moveSpd = _speed
	? _moveSpd < _speed && 1 == _forceSpdType: _moveSpd = _speed

	doStop _vehicle
	_pos = getPosASL _vehicle
	_diff = [_dest, _pos] call funcVectorSub
	_diff = [_diff, _moveSpd / (_diff call funcVectorLength)] call funcVectorScale
	? not _crossBrdige: goto "ForceMove"
		; correct vehicle vector dir
		_bridge = NearestObjectDistance [_vehicle, "Bridge", 50]
		? isNull _bridge: goto "EOF"

		; correct x-bias
		_vec = [getPosASL _bridge, _pos] call funcVectorSub
		_vec = [_vec, [0,0,1], getDir _bridge] call funcVectorRot3D
		_vec set [1,0], _vec set [2, 0]
		_vec = [_vec, [0,0,1], - (getDir _bridge)] call funcVectorRot3D

		; add z-correction in position/velocity. OFP engine has bug that z-bias sometimes won't work
		; Refer to solution of attach, move vehicle to the sea and move back after a delay
		_correctedPos = [_pos, _vec] call funcVectorAdd
		? _counter < 3: _correctedPos = [_correctedPos, [0, 0, 0.5]] call funcVectorAdd, _vehicle setPosASL positionAttach
		~ 0.1
		_vehicle setPosASL _correctedPos

		; _diff set [2, (_diff select 2) + 1]

	# ForceMove
		? _moveSpd * 3.6 <= 18 || not _crossBrdige: goto "VectorAdjusted"
			_up = vectorUp _bridge
			_vehicle setVectorDir _diff
			_vehicle setVectorUp _up
			_vehicle setPosASL _correctedPos
		# VectorAdjusted
		_vehicle setVelocity _diff
	~ 0.2
		_vehicle doWatch _dest

	~ 0.8
	? not (_this select 1): goto "EOF"
	? not alive _vehicle: goto "EOF"
	? [getPosASL _vehicle, _dest, _delta] call _inHalfPlane: goto "Reached"
	? [getPosASL _vehicle, _dest] call funcDistH < 5: goto "Reached"
	goto "loop"

# Reached

# EOF
	_this set [0, false]