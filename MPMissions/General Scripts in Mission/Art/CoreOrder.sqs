; ---------------------------------------------------------------------------------------------------
; |									General Art Order SQS Script									|
; |		Prepare necessary parameters outside. Core art order logics will be preprocessed here.		|
; ---------------------------------------------------------------------------------------------------

; args: [art general params: [], preprocess params: [], script type info: [], server extra info: []]

; art general params: [unit, si, area marker idx, use big angle, launcher type: enum, order type: enum (optional), MLRS shooting count limit (optional)]
_params = _this select 0
_unit = _params select 0, _si = _params select 1, _idx = _params select 2, _biggerAngle = _params select 3, _enum = _params select 4
_orderType = "General Area"
? count _params > 5: _orderType = _params select 5
_bAutoDetect = _orderType == "Auto Detect", _adSleepCnt = 0, _adSleepMod = 1

_mlrsCnt = 0
? count _params > 6: _mlrsCnt = _params select 6

; preprocess params: [pre move info, suggested shooting init speed]
_params = _this select 1
_preMoveInfo = _params select 0, _suggestedSpeed = _params select 1
; script type info: [is server, is vehicle, is structure]
_params = _this select 2
_isServer = _params select 0, _isVehicle = _params select 1, _isStruct = _params select 2
; script type info: [[rts status, rts id]]
_params = _this select 3
? count _params > 0: _rtsStatus = _params select 0; _rtsId = _params select 1

_isInfantry = not _isVehicle && not _isStruct
_params = 0, _this = 0

; Order initialization
	; TODO
	; marked as RTS/concurrent order, etc

	? _isServer: goto "OrderInited"
	_uid = [_unit, _si, giPlayer] call funcCalcUID
	? _uid > 12: hint "Fail to get UID, order not set. Try again please."; exit
	_id = (playerOrderID select _uid) + 1; [_uid, _id] exec "\TZK_Scripts_4_0_4\Player\Order\New.sqs"
	? !(_unit in PlayerShootingUnits): PlayerShootingUnits set [_uid, _unit]

# OrderInited

; Soldier initialization
? not _isInfantry: goto "SoldierInited"
	_commandType = _unit call preprocessFile "Art\GetSoldierArtType.sqf"
	_speed = 0; _range = 0; _text = ""; _weapon = ""; _weaponCheck = ""; _rldTime = 0
	_validMags = []
	call preprocessFile "Art\InitSoldierScript.sqf"
# SoldierInited

; Switch magazine
	? _suggestedSpeed > 0: [vehicle _unit, _suggestedSpeed, _enum] exec "Art\SwitchSuggestedSpeed.sqs"
	; ? -2 == _suggestedSpeed: [vehicle _unit, _enum, _idx, _si] exec "Server\Art\SwitchAuto.sqs"
; Get marker info
	_markerInfo = [-10, -10, 0, 0, 0]
	? not _bAutoDetect: _markerInfo = [_idx, _si, _isServer] call preprocessFile "Art\GetMarkerInfo.sqf"
	_markerCache = + _markerInfo
	_arrayEq = preprocessFile "Algo\arrayEqual.sqf"
; Rts infomation
	; _abort = {[[_unit], [_si, false]] exec "Rts\Framework\OrderDtor.sqs"}; _bClearRts = false
; Create local target object
	_target = {Target_TZK_xj400} camCreate [0,0,0]; _target setPos [_markerInfo select 0, _markerInfo select 1, 0]; _target allowDammage false
; Get type info in area scripts
	? not _isStruct: _type = (vehicle _unit) call funcGetUnitTypeFromObject
	? _isStruct: _type = (vehicle _unit) call funcGetStructTypeFromObject

; Init Art Variables
	? _isServer && localize {TZK_ART_406} != "true": [_si, "TZK_Art_4_0_6.pbo isn't detected. Art module inactivated."] exec "Server\Msg\sSvrMsg2Cmd.sqs", exit
	_longRangeCoef = 1.5
	; big angle will be invalid when ordering tanks.
	? "Tank" == _enum: _biggerAngle = false; _longRangeCoef = 2

	_quitCond = {not alive _unit}
	? _isInfantry: _quitCond = _quitCond + { or _vehicle != vehicle _unit}
	? _isServer: _quitCond = _quitCond + { or (not (_unit call rtsOrderCheck) || _rtsId != _rtsStatus select 1)}
	? not _isServer: _quitCond = _quitCond + { or call orderCheck}

	? _bAutoDetect: _quitCond = {not alive _unit or -1 == autoShootVehs find vehicle _unit}

	_msg = ""

	_vehicle = vehicle _unit; _typeName = typeOf _vehicle; _script = "Art\FiredEh406.sqs"
	? _biggerAngle: _heliH = typeOf _target camCreate [0,0,0]

	_bShrapnel = false
	_needAvoidStruct = call preprocessFile "Art\NeedAvoidStruct.sqf"
	_avoidBaseDist = 50; if (not _isStruct && _type in typesHeavyHowitzer) then {_avoidBaseDist = 120}
	_posT = [-1, -1]; _defenceObject = objNull
	_tuggedCheckCnt = 0
	_firedCnt = 0
	_typesSup = (typesSupport select si0) + (typesSupport select si1) + [(typesMHQ select _si)]

; ======== Art order part ========
; Pre-move if ordered
; 基于传入的 pre-move info, 产生预移动坐标. 散布半径为50. 散布半径即单位目的地与rts点击坐标之间所允许的最大距离
_distributionRadius = (if _isInfantry then {20} else {50})
# PreMove
	? _bAutoDetect: goto "CheckDistance"

	_startPos = getPos _unit
	? _isStruct: goto "CheckDistance"
	; 如果没有指定 pre-move info, 也即"就地炮击", 则设置一个小的散布半径, 如此一来, 第一次rearm完毕后有较大概率单位能回到原处 (除非补给单位贴着它, 这属于找死, 不予处理)
	? 0 == count _preMoveInfo: _preMoveInfo = [getPos _vehicle, getPos _vehicle], _distributionRadius = (if _isInfantry then {4} else {10}), goto "CheckDistance"
	_startPos = [_unit, _preMoveInfo select 0, _preMoveInfo select 1, _distributionRadius] call preprocessFile (TzkScripts select 386)

	_vehicle exec "Art\Undeploy.sqs"
	_unit doMove _startPos; _unit setUnitPos "UP"
	_dist = ([getPos _unit, _startPos] call funcDistH); _dist = _dist - _dist % 1
	? _dist < _distributionRadius: goto "CheckDistance"

	? _isVehicle: if ([_vehicle, "driver"] call preprocessFile "Util\HasEmptySeat.sqf") then {_msg = format ["%1 %2 %3 %4 %5 %6. %7", localize {TZK_LANG_NEED_MOVE_TO}, localize {TZK_LANG_PREDEFINED}, localize {TZK_LANG_POSITION}, localize {TZK_LANG_BUT}, localize {TZK_LANG_HASNT}, localize {TZK_LANG_DRIVER}, localize {TZK_LANG_ORDER_ABORTED}], goto "EOF"}
	_unit groupChat format [(TzkInGameText select 000 select 5), _dist]
	# LoopPreMove
		_unit doMove _startPos
		~ 5
		? call _quitCond: _msg = ""; goto "EOF"
		? ([getPos _unit, _startPos] call funcDistH) > 30: goto "LoopPreMove"

# CheckDistance
	? _bAutoDetect: _adObj = _unit call preprocessFile "SpotEnemy\GetPplTarget.sqf"
	? _bAutoDetect && isNull _adObj: _msg = format ["[%1] %2. %3", localize {TZK_LANG_AUTO_DETECT}, localize {TZK_LANG_NO_AVAILABLE_TARGET}, localize {TZK_LANG_WAITING_NEXT_LOOP}]; _adSleepMod = 20; goto "AutoDetectSleep"
	? _bAutoDetect: _target setPos getPos _adObj

	_distLimit = viewDistance, _curDist = ([getPos _unit, _target] call funcDistH)
	? upgMatrix select _si select upgLongWeaponRange == 2: _distLimit = _longRangeCoef * viewDistance;
	; Reassign limit for infantry
	? _isInfantry: _distLimit = _range + 350; _msg = format ["%1 %2 %3 %4. %5", localize {TZK_LANG_TARGET_TOO_FAR}, localize {TZK_LANG_FOR}, localize {TZK_LANG_SOLDIER}, _text, localize {TZK_LANG_ORDER_ABORTED}]
	_bValid = true
	? _isInfantry && _curDist > _distLimit: _bValid = false
	? _isStruct && _curDist > _distLimit: _bValid = false
	? _isStruct && _curDist < 50: _bValid = false

	? not _bAutoDetect && not _bValid: goto "EOF"
	? _bAutoDetect && not _bValid: _msg = format ["[%1] %2 %4. %3", localize {TZK_LANG_AUTO_DETECT}, localize {TZK_LANG_NO_AVAILABLE_TARGET}, localize {TZK_LANG_WAITING_NEXT_LOOP}, localize {TZK_LANG_NEARBY}]; _adSleepMod = 20, goto "AutoDetectSleep"

_posCorrect = 0
# TryApproachingTarget
? _isStruct: goto "PrePareToAttack"
? _bAutoDetect: goto "PrePareToAttack"

	? _isInfantry: goto "MoveInfantry"
		_dist = [_vehicle, _target] call funcDistH
		_destPos = getPosASL _vehicle;
		_destPos set [2, 0]
		? [_destPos, getPos _target] call funcDistH > _distLimit: _vec = [getPos _target, _destPos] call funcVectorSub; _len = _vec call funcVectorLength; _destPos = [_destPos, [_vec, 1 - 0.9*_distLimit/_len] call funcVectorScale] call funcVectorAdd
		? [_destPos, getPos _target] call funcDistH > _distLimit: _msg = format ["%3 (dist: %1m, limit: %2m). %4", _dist, _distLimit, localize {TZK_LANG_CANT_APPROACH}, localize {TZK_LANG_ORDER_ABORTED}], goto "EOF"
		? ([getPos _unit, _destPos] call funcDistH) < 30 && [_destPos, getPos _target] call funcDistH < _distLimit: goto "PrePareToAttack"

		? [_vehicle, "driver"] call preprocessFile "Util\HasEmptySeat.sqf": _msg = format ["%3 %8 (dist: %1m, limit: %2m) %4 %5 %6. %7", _dist, _distLimit, localize {TZK_LANG_NEED_MOVE_TO}, localize {TZK_LANG_BUT}, localize {TZK_LANG_HASNT}, localize {TZK_LANG_DRIVER}, localize {TZK_LANG_ORDER_ABORTED}, localize {TZK_LANG_TARGET}], goto "EOF"
		; change deployment of howitzer/TOS
		_vehicle exec "Art\Undeploy.sqs"
		goto "ExecMove"
	# MoveInfantry
		? _unit distance _target < _range * (10 - _posCorrect) / 10: goto "PrePareToAttack"
		? _posCorrect >= 10: _msg = localize {TZK_LANG_CANT_FIND_ATTACK_POS} + ". " + localize {TZK_LANG_ORDER_ABORTED}, goto "EOF"
		_vector = [getPosASL _target, _startPos] call funcVectorSub; _dist = ([_startPos, getPosASL _target] call funcDistH) - _range*8/9
		_vector = [_vector, _dist/(_dist+_range*8/9)] call funcVectorScale;
		_auxiliaryPoint = [_startPos, _vector] call funcVectorAdd
		_destPos = [[[getPosASL _target, _auxiliaryPoint] call funcVectorSub, _posCorrect / 10] call funcVectorScale, _auxiliaryPoint] call funcVectorAdd
# ExecMove
_unit doMove _destPos; _unit setUnitPos "UP"
? ([getPos _unit, _destPos] call funcDistH) < 3: goto "PrePareToAttack"
# CheckPosReached
	_unit doMove _destPos
	~ 5
	? call _quitCond: _msg = ""; goto "EOF"
	? ([getPos _unit, _destPos] call funcDistH) > 30: goto "CheckPosReached"
	? _isInfantry: if (_unit distance _target > _range || [_unit, _destPos] call funcDistH > 5) then {goto "CheckPosReached"}

# PrePareToAttack
	_delay = 0
	_ret = call preprocessFile "Art\AimAndCalcDelay.sqf"
	? not _ret: goto "EOF"
	
	; 等待期间，进行异步计算。获取“规避建筑的可用炮击坐标”可能很花时间，用SQS进行计算
	_timeLimit = _time + _delay

	; format of _absLegalTargetPos: [0-valid, 1-position]
	_absLegalTargetPos = [true]
	? _bAutoDetect: goto "PrepareLegalPosDone"

	; _state: [finished, succeeded]
	_state = [false, false]
	[[_idx, _avoidBaseDist, _si, _markerInfo, _unit], _state, _absLegalTargetPos] exec "Art\prepareAbsLegalPos.sqs"
	_delay = 0.1
	# WaitLegalPosPrepared
		~ _delay
		_delay = _delay + 0.5

		; finished check
		? not (_state select 0): goto "WaitLegalPosPrepared"
	; failed check
	? not (_state select 1): _msg = TzkInGameText select 000 select 3; goto "EOF"

	# PrepareLegalPosDone
	~ (_timeLimit - _time)

	? _isInfantry: goto "PreCalculate"
	; analysis weapon for vehicle/structure
	_weapon = ""
	_ret = call preprocessFile "Art\PrepareWeapon.sqf"
	? not _ret: goto "EOF"
	_bShrapnel = ("Shrapnel_W_xj400" == _weapon || "Shrapnel_E_xj400" == _weapon)
# PreCalculate
	_dist = [_unit, _target] call funcDistH
	? _dist > (if _isInfantry then {_range} else {_distLimit}): goto "CheckDistance"
	? _dist < _distLimit && _dist > viewDistance: _unit groupChat (TzkInGameText select 000 select 6)

	_ammoArray = _vehicle ammoArray _weapon; _equippedMag = ""; _ammoOld = 0;
	_ret = call preprocessFile "Art\checkAmmoMag.sqf"
	? not _ret && count _ammoArray == 0: _magazines = _vehicle call funcGetNotEmptyMags; goto "RearmAnalysis"
	? not _ret: goto "EOF"

	? _needAvoidStruct && not (_absLegalTargetPos select 0): _msg = localize {TZK_LANG_AREA_FILLED_ENEMY_STRUCT}; goto "EOF"
	? not _isInfantry: _speed = call preprocessFile "Art\GetInitSpeed.sqf"

	; calculate turning turret delay. However in original OFP no script command can return turret's direction
	_delay = [_vehicle, _target] call preprocessFile "Art\TurnTurretDelay.sqf"
	; outer variables for attack loop
	; For TZK customed GL, the "muzzle" using same name as "weapon". Thus unnecessary to worry about GL in TZK. Check it in more general way.
	? _isInfantry: _magazines = _unit call funcGetNotEmptyMags; _numOfMagLast = 1 + ("_x in _validMags" count _magazines)
	; Structure won't check whether magazine need reload. TZK equip only 1 mag to each structure.
	? not _isInfantry: _reloadMagazine = false
	? not _isInfantry && _suggestedSpeed > 0: _delay = (call format ["%1", _weapon GetWeaponParam "magazineReloadTime"]) + (call format ["%1", ((_vehicle ammoArray _weapon) select 0) GetWeaponParam "reloadTime"]) * 1.1 + 0.5
# AttackCheck
	; Attached check. Being tugged deploy-required vehicle and structure can't shoot
	_tuggedCheckCnt = _tuggedCheckCnt - 1
	? _tuggedCheckCnt <= 0: _tuggedCheckCnt = 5; if (call preprocessFile "Art\CheckTugged.sqf") then {goto "EOF"}

	; Generate target pos
	_ret = [_avoidBaseDist, _absLegalTargetPos, _si] call preprocessFile "Art\GenerateTargetPos.sqf"
	? not _ret: goto "EOF"
	; assign target object to position
	_posT set [2, _posT call funcHASL]; _target setPosASL _posT
	
	? _unit distance _target > (if _isInfantry then {_range} else {_distLimit}): goto "CheckDistance"

	_posV = getPosASL _vehicle
	_angle = 0; _elev = 0

	? _bAutoDetect: if (not alive _adObj) then {goto "PreMove"}
	? _bAutoDetect: if not (_adObj call preprocessFile "SpotEnemy\LegalPplTarget.sqf") then {goto "PreMove"}
	? _bAutoDetect: _ret = [_adObj, _avoidBaseDist, _si] call preprocessFile "Art\Predicate.sqf"
	? _bAutoDetect && not _ret: _adSleepMod = 2; goto "AutoDetectSleep"

	? not _bAutoDetect: _ret = call preprocessFile "Art\AreaCalculate.sqf"
	; allow soldier move closer to attack
	? _isInfantry && not _ret: _posCorrect = _posCorrect + 1; goto "TryApproachingTarget"
	? not _ret: goto "EOF"

	? _biggerAngle: _posH = [_posT, _posV] call funcVectorSub, _posH set [2, 0], _length = _posH call funcVectorLength, _posH = [_posH, 500/_length] call funcVectorScale, _posH set [2, 500* 1.732], _posH = [_posH, _posV] call funcVectorAdd, _heliH setPosASL _posH

	? _biggerAngle: [_vehicle, _heliH, _delay] exec "Util\KeepAimBigAngle.sqs"
	_vehicle reveal _target
	~ 0.1
	_vehicle doTarget (if _biggerAngle then {_heliH} else {_target})

	# RearmAnalysis
	? _isInfantry: goto "RearmCheck4Soldier"
		; rearm check for vehicle/structure
		~ 0.1
		? call _quitCond: _msg = ""; goto "EOF"
		? _vehicle knowsAbout _target < 0.01 && _vehicle distance _target > viewDistance: _msg = localize {TZK_LANG_CANT_LOCATE}; goto "EOF"

		? 0 == _ammoOld: _magazines = _vehicle call funcGetNotEmptyMags; _validMags = [_weapon] call funcWeaponValidMags; if ({_x in _validMags} count _magazines == 0) then {goto "CheckRearm"};

		; _ammoArray is initialized before the loop and updated after having shot while before next loop delay
		? count _ammoArray == 0: _msg = localize {TZK_LANG_CANT_RELOAD}; goto "EOF"
		_currentMag = _ammoArray select 0
		? _currentMag != _equippedMag: goto "PreCalculate"

		; no way in 2.01 to know when will a mag is loaded. Force shoot and wait until shooting actually happen using "_ammoOld"
		~ _delay
		? call _quitCond: _msg = ""; goto "EOF"
		goto "RearmCheckDone"
	# RearmCheck4Soldier
		; should be placed in loop below, due to time cost of animation
		; delay must be correctly assigned for "fire" command.
		# WaitUntilReload
			; For soldier weapon, the reload time should be calculated manually, considering the reload animation time cost.
			~ _delay
			_delay = _rldTime
			? call _quitCond: _msg = ""; goto "EOF"
			? "_x in _validMags" count _magazines == 0: goto "CheckRearm"
			
			_magazines = _unit call funcGetNotEmptyMags
			? ("_x in _validMags" count _magazines) >= _numOfMagLast && _unit ammo _weapon < 1: goto "WaitUntilReload"

	# RearmCheckDone
	; check ammoarray again since delayed
	_ammoArray = _vehicle ammoArray _weapon
	? count _ammoArray == 0: _msg = (if _isInfantry then {localize {TZK_LANG_NO_AVAILABLE_MAG}} else {localize {TZK_LANG_CANT_RELOAD}}); goto "EOF"
	_currentMag = _ammoArray select 0
	? _currentMag != _equippedMag: goto "PreCalculate"
	; Disable art script if combatMode isn't yellow/red
	; However this design is invalid for player team member
	? _isServer: if ("BLUE" == combatMode _vehicle || "GREEN" == combatMode _vehicle) then {_delay = 5; goto "AttackCheck"}

	; check whether target is valid
	? _bAutoDetect: if (not alive _adObj) then {goto "PreMove"}

	; for soldier
	_numOfMagLast = "_x in _validMags" count _magazines
	; what if magazine changed? sure the elevation will change too.

	; for non-soldier
	? not local gunner _vehicle: _delay = 5; goto "AttackCheck"
	? 1 == _ammoOld: _reloadMagazine = true

	; pre-process on fire
	? "Destroy Obstruction" == _orderType: if (not alive _defenceObject) then {goto "AttackDone"}
	; shoot pos check
	? not (_avoidBaseDist call preprocessFile "Art\CheckShootPos.sqf"): goto "EOF"
	; marker check
	? not ([_markerCache, _markerInfo] call _arrayEq): _markerCache = + _markerInfo; goto "PreMove"

	_ehRev = _vehicle addEventHandler ["Fired",""], _vehicle removeEventHandler ["Fired", _ehRev]
	_vehicle addEventHandler ["Fired", format [{[_this, %1, %2, %3, %4, %6] exec "%5"}, _speed, _angle, _elev, _ehRev, _script, [_si, _bShrapnel]] ]
	_vehicle fire _weapon
	_firedCnt = _firedCnt + 1
	? "MLRS" == _enum && _mlrsCnt > 0 && _mlrsCnt <= _firedCnt: _msg = format ["%1 %2", _firedCnt, localize {TZK_LANG_ROCKETS_SHOT}], goto "EOF"

	? _isInfantry: goto "AttackDone"

		# w8UntilShooted
			_counter = 0
			~ (if (_delay > 1) then {1} else {_delay})
			_ammoArray = _vehicle ammoArray _weapon
			? 0 == count _ammoArray: _msg = localize {TZK_LANG_CANT_RELOAD}; goto "EOF"
			? call _quitCond: _msg = ""; goto "EOF"
			_counter = _counter + 1
			? _counter >= 30: [_si, format ["Verify whether %1 main weapon is loaded, sir. If weapon is ready then reorder me and report a bug to script designer.", _unit]] exec "Server\Msg\sSvrMsg2Cmd.sqs", _counter = 0
			? _ammoArray select 1 == _ammoOld && _ammoOld != 1: goto "w8UntilShooted"

		_ammoOld = _ammoArray select 1
		_delay = (call format ["%1", (_ammoArray select 0) GetWeaponParam "reloadTime"]) * 1.1 + 0.5; if ("MLRS" == _enum) then {_delay = _delay - 0.5}
		? _reloadMagazine && not _isStruct: _delay = (call format ["%1", _weapon GetWeaponParam "magazineReloadTime"]) + _delay; _reloadMagazine = false
		_delay = _delay - 1;

	# AttackDone
	~ 0.1
	if _biggerAngle then {_vehicle doWatch _posH} else {_vehicle doWatch _posT}
	goto "AttackCheck"
# CheckRearm
	? _bAutoDetect: goto "AutoDetectWaitRearm"
	? not _isInfantry: goto "SkipSoldierRearmDataCheck"
		; verify soldier rearm data
		_bValid = [_validMags, (_unit call preprocessFile "Common\SQF\RearmData.sqf") select 1] call funcArrayOverlap
		? not _bValid: _msg = localize {TZK_LANG_MISMATCH_MAGDATA}; goto "EOF"

	# SkipSoldierRearmDataCheck
	; pre rearm
	? _isStruct: goto "SeekSup4Structure"
	? not _isInfantry: goto "SeekSup4Vehicle"
		_sup = [_unit, _si, 512, true] call preprocessFile "Util\SoldierRearmSupport.sqf"
		? isNull _sup: _msg = format ["%1 %2 %3 %4 512 %5. %6. %7", localize {TZK_LANG_NO}, localize {TZK_LANG_SUPPORT}, localize {TZK_LANG_VEHICLE}, localize {TZK_LANG_WITHIN}, localize {TZK_LANG_METER}, localize {TZK_LANG_MAG_EXHAUSTED}, localize {TZK_LANG_ORDER_ABORTED}]; goto "EOF"
		goto "SupportFound"
	# SeekSup4Structure
		_vs = [getPos _unit, 50, _typesSup, []] call funcGetNearbyVehicles
		? count _vs == 0: _msg = format ["%1 %2 %3 %4 50 %5. %6. %7", localize {TZK_LANG_NO}, localize {TZK_LANG_SUPPORT}, localize {TZK_LANG_VEHICLE}, localize {TZK_LANG_WITHIN}, localize {TZK_LANG_METER}, localize {TZK_LANG_MAG_EXHAUSTED}, localize {TZK_LANG_ORDER_ABORTED}]; goto "EOF"
		_sup = (_vs select 0) select 0
		goto "SupportFound"
	# SeekSup4Vehicle
		_vs = [getPos _unit, 1500, _typesSup, []] call funcGetNearbyVehicles
		? count _vs == 0: _msg = format ["%1 %2 %3 %4 1500 %5. %6. %7", localize {TZK_LANG_NO}, localize {TZK_LANG_SUPPORT}, localize {TZK_LANG_VEHICLE}, localize {TZK_LANG_WITHIN}, localize {TZK_LANG_METER}, localize {TZK_LANG_MAG_EXHAUSTED}, localize {TZK_LANG_ORDER_ABORTED}]; goto "EOF"
		_distMin = 1500; _sup = objNull
		{ _dist = _unit distance (_x select 0); if (_dist < _distMin) then { _sup = (_x select 0); _distMin = _dist } } foreach _vs
		? isNull _sup: _msg = format ["%1 %2 %3 %4 1500 %5. %6. %7", localize {TZK_LANG_NO}, localize {TZK_LANG_SUPPORT}, localize {TZK_LANG_VEHICLE}, localize {TZK_LANG_WITHIN}, localize {TZK_LANG_METER}, localize {TZK_LANG_MAG_EXHAUSTED}, localize {TZK_LANG_ORDER_ABORTED}]; goto "EOF"
		goto "SupportFound"

	# SupportFound
		? not _isServer: _unit groupChat (TzkInGameText select 000 select 7)
		? _isServer: [_unit, _sup] exec "Net\sMovingToSupport.sqs"
		_timeAbort = time + 60 * (if _isInfantry then {15} else {5})
		? _isStruct: goto "SupportReached"
		? _isVehicle: _vehicle exec "Art\Undeploy.sqs", {_x doFollow leader _x} forEach crew _vehicle
		~ 0.1
		_rearmDist = (if _isInfantry then {5} else {25})
		_rearmRange = (if _isInfantry then {10} else {30})
		? (_unit distance _sup) <= _rearmDist * 2: goto "SupportReached"

		? _isVehicle: if ([_vehicle, "driver"] call preprocessFile "Util\HasEmptySeat.sqf") then {_msg = format ["%1 %2 %3 %4 %5. %6", localize {TZK_LANG_NEED_MOVE_TO}, localize {TZK_LANG_SUPPORT}, localize {TZK_LANG_BUT}, localize {TZK_LANG_HASNT}, localize {TZK_LANG_DRIVER}, localize {TZK_LANG_ORDER_ABORTED}], goto "EOF"}
		# MoveToSupport
			_posMove = [[0,_rearmDist], (getDir _sup)] call funcVectorRot2D
			_posMove = [getPos _sup, _posMove] call funcVectorSub
			_vehicle doMove _posMove; _unit setUnitPos "UP"
			~ 5
			? call _quitCond: _msg = ""; goto "EOF"
			? !(alive _sup): goto "CheckRearm"
			? time > _timeAbort: _msg = format ["%1. %2. %3", localize {TZK_LANG_TOO_LONG}, localize {TZK_LANG_CANT_REACH_SUP}, localize {TZK_LANG_ORDER_ABORTED}]; goto "EOF"
			? (_unit distance _sup) > _rearmRange: goto "MoveToSupport"
	# SupportReached

	; calc switch mag speed for non-soldier
	? _isInfantry: goto "ExecRearm"
		_speed = -1; _mag = "";
		_magazines = magazines _vehicle; _validMags = [_weapon] call funcWeaponValidMags; {if (_x in _validMags) then {_mag = _x}} forEach _magazines
		? _mag != "": _speed = substr [_mag, sizeofstr(_mag) - sizeofstr("xxxx_xj400"), sizeofstr(_mag) - sizeofstr("_xj400")]; if !(substr [_speed, 0, 1] in ["0","1","2","3"]) then {_speed = -1} else {_speed = call _speed};
		_delay = [0,3] select (_speed > 0)
	# ExecRearm
		_gi = (groupMatrix select _si) find (group _unit)
		_nonAIgroup = false
		? (group _unit) == (baseGroup select _si): _nonAIgroup = true
		? _isServer: [_unit, [true]] exec (TzkScripts select 006)
		? not _isServer: doStop _unit

		? _isServer: _rearmParam = [[_unit, _si, _gi, _vehicle, _type, _sup, _nonAIgroup], false, false], _rearmParam exec "Server\AI_Rearm.sqs"
		? not _isServer: _rearmParam = [[_unit, _sup], false, false]; _rearmParam exec "Player\Rearm.sqs"
		? not _isServer && not _isInfantry && not local _vehicle: _unit groupChat (TzkInGameText select 000 select 8)

	; _try = 0
	# WaitRearmComplete
		~ 5
		? call _quitCond: _msg = ""; goto "EOF"
		; todo: hint if rearm failed due to insufficiend fund
		? not (_rearmParam select 1): goto "WaitRearmComplete"

	; rearm fail check
	? not (_rearmParam select 2): _msg = format ["%1 %2 %3. %4", _unit, localize {TZK_LANG_REARM}, localize {TZK_LANG_FAILED}, localize {TZK_LANG_ORDER_ABORTED}], goto "EOF"

	? _isInfantry: goto "PreMove"
	; post rearm for non-soldier
	~ _delay + 1
	? _speed <= 0: goto "PreMove"
	_delay = 1; [_vehicle, _speed] exec (TzkScripts select 132)
	? not _isServer && not _isInfantry && not local _vehicle: _unit groupChat (TzkInGameText select 000 select 9)

	# WaitSwitchComplete
		~ _delay
		? call _quitCond: _msg = ""; goto "EOF"
		_delay = 5
		? !someAmmo _vehicle: goto "WaitSwitchComplete"
	goto "PreMove"

; For auto detect mode
# AutoDetectWaitRearm
	; todo: prepare hint message if support server ai units using auto detect 
	_unit groupChat (TzkInGameText select 000 select 10)
	~ 30
	? call _quitCond: _msg = ""; goto "EOF"
	; return to script beginning
	goto "PreMove"
; For auto detect sleep
# AutoDetectSleep
	_adSleepCnt = _adSleepCnt + 1, _bDisplay = false
	? _adSleepCnt % _adSleepMod == 0: _bDisplay = true
	; The product of _adSleepMod and current stage delay should be a constant
	
	? _bDisplay && _msg != "" && _isServer: _msg = format ["[%1] ", _unit] + _msg, [_si, _msg] exec "Server\Msg\sSvrMsg2Cmd.sqs"
	? _bDisplay && _msg != "" && not _isServer: _unit groupChat _msg
	? _bDisplay && _msg != "" && not _isServer: TitleText [format ["%1: %2", _unit, _msg], "PLAIN DOWN", 0.25]; 
	~ 5
	? call _quitCond: _msg = ""; goto "EOF"
	; return to script beginning
	goto "PreMove"

; End Of File
# EOF
	? not _isServer: PlayerShootingUnits set [_uid, objNull]

	deleteVehicle _target
	? _biggerAngle: deleteVehicle _heliH

	? _msg != "" && _isServer: _msg = format ["[%1] ", _unit] + _msg, [_si, _msg] exec "Server\Msg\sSvrMsg2Cmd.sqs"
	? _msg != "" && not _isServer: _unit groupChat _msg
	? _msg != "" && not _isServer: TitleText [format ["%1: %2", _unit, _msg], "PLAIN DOWN", 0.25]; 
	; ? _bClearRts: call _abort
	exit