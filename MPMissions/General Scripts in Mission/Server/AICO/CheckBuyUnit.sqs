; arg: [unit, si, giBuyer, [nextOrder]]

_unit = _this select 0
_si = _this select 1
_giBuyer = _this select 2
; undefine _this to release it
_this = nil

_money = groupMoneyMatrix select _si select _giBuyer
? _money < 500: exit

_nextOrder = if(count _this >= 3) then {_this select 3} else {"default"}
; enum buyMode
_bmDefault = 0; _bmTrans = 1; _bmTanks = 2; _bmSoldier = 3; _bmPlaneAT = 4; _bmPlaneNuke = 5; _buyMode = _bmDefault
; buy number
_buyNum = 1; _decideNum = 2

; always fill transport group in the beginning.
_giTrans = AICO_giTrans select _si
? count _giTrans > 0: _units = units (groupMatrix select _si select (_giTrans select 0)), { if(_x != leader _x && _x == vehicle _x) then {deleteVehicle _x} } forEach _units, if(count ([_si, stAir, false] call funcGetIdleFactories) > 0 && "_x != vehicle _x" count _units < 4) then {_buyMode = _bmTrans, goto "order_break"}
; special mission mode logic
? boole_Infantry_Mode: _buyMode = _bmSoldier, goto "order_break"
? _nextOrder == "TakeHoldTowns": goto "order_TakeHoldTowns"
? _nextOrder == "DestroyEnemy": goto "order_DestroyEnemy"
; before take hold town stage
	_buyMode = [_bmTanks, _bmSoldier] select (random 2 - 0.5)*1.0
	goto "order_break"
# order_TakeHoldTowns
	? time > 60*30 && _money >= 30000: _buyMode = _bmPlaneAT, goto "order_break"
	_buyMode = [_bmTanks, _bmSoldier] select (random 2 - 0.5)*0.7
	? _money < 7000: _buyMode = _bmSoldier
	goto "order_break"
# order_DestroyEnemy
	? _money >= 90000: _buyMode = _bmPlaneNuke, goto "order_break"
	_buyMode = [_bmTanks, _bmSoldier] select (random 2 - 0.5)*0.5
	? _money < 7000: _buyMode = _bmSoldier
	goto "order_break"
# order_default
	; _giList = [_si] call funcGetAIGroupsIndex; _c = count _giListï¼› _giJoin = _giList select random _c - 0.5
	_buyMode = _bmDefault
	? name player == "IF": player globalChat "AICO Buy Default Mode."
# order_break
; ============================================================================================================================
; { if ( _x != (leader _x) && _x == (vehicle _x) ) then { deleteVehicle _x } } foreach (units ((groupMatrix select _si) select _giJoin))
_unitsBuy = []; _giInf = AICO_giInf select _si
# CheckBuyUnit
	? _decideNum <= 0: exit
	? _buyMode == _bmTrans: goto "mode_trans"
	? _buyMode == _bmTanks: goto "mode_tank"
	? _buyMode == _bmSoldier: goto "mode_soldier"
	? _buyMode == _bmPlaneAT: goto "mode_planeAT"
	? _buyMode == _bmPlaneNuke: goto "mode_nuke"

	goto "mode_default"
; ============================================================================================================================
	
	# mode_trans
		_giJoin = _giTrans select random count _giTrans - 0.5
		_slots = maxGroupSize - count units (groupMatrix select _si select _giJoin) - (groupUnitsBuildingMatrix select _si select _giJoin)
		? _slots <= 0: _decideNum = _decideNum - 1; _buyMode = _bmSoldier; goto "CheckBuyUnit"
		; #TranspCheckBuyAir
		; ? count _typesHeli == 0: goto "TranspCheckBuyGround"
		_typesHeli = [TransportirNOHeliW, TransportirNOHeliE] select _si
		_res = [getPos (mhq select _si), 500, _typesHeli, []] call funcGetNearbyVehicles
		? {damage (_x select 0) == 0 && getPos (_x select 0) select 2 < 5} count _res <= 2: {_unitsBuy set [count _unitsBuy, [_x, 1]]} forEach _typesHeli; _buyNum = 2; goto "TypesSelected"
		; #TranspCheckBuyGround
		_buyMode = _bmSoldier; goto "CheckBuyUnit"
	# mode_tank
		_giTanks = [_giBuyer] + (AICO_giTanks select _si select random count (AICO_giTanks select _si) - 0.5)
		_giJoin = _giTanks select random count _giTanks - 0.5
		_slots = maxGroupSize - count units (groupMatrix select _si select _giJoin) - (groupUnitsBuildingMatrix select _si select _giJoin)
		? _slots <= 0: _decideNum = _decideNum - 1; _buyMode = _bmSoldier; goto "CheckBuyUnit"
		_utbTanks = utbTanksHeavy; if (bool_TZK_SEMod_Mode) then {_utbTanks = utbTanksHeavyD}; if (bool_TZK_MF_Mode) then {_utbTanks = utbTanksL}
		? _giJoin == _giBuyer: _unitsBuy = unitsBuyAI select _si select _utbTanks, goto "TypesSelected"
		_unitsBuy = unitsBuyAI select _si select _utbTanks
		? time > 60*50 && _money > 15000 && random 1 < 0.1: _unitsBuy = unitsBuyAI select _si select utbTanksAT
		; Extra mode setting.
		? bool_TZK_MF_Mode: _unitsBuy = unitsBuyAI select _si select utbTanksMixed
		? bool_TZK_Lester_Mode: if (time < 60*45) then {_unitsBuy = (unitsBuyAI select _si select utbTanksL) + (unitsBuyAI select _si select utbTanksAT)} else {_unitsBuy = (unitsBuyAI select _si select utbTanksL) + (unitsBuyAI select _si select utbTanksAT) + (unitsBuyAI select _si select utbTanksHeavy) + (unitsBuyAI select _si select utbAAvehicles) + (unitsBuyAI select _si select utbSupport)}
		_buyNum = 2
		goto "TypesSelected"
	# mode_soldier
		? count _giInf < 1: exit
		_giJoin = _giInf select random count _giInf - 0.5
		_slots = maxGroupSize - count units (groupMatrix select _si select _giJoin) - (groupUnitsBuildingMatrix select _si select _giJoin)
		? _slots <= 0: _decideNum = _decideNum - 1; _buyMode = _bmSoldier; goto "CheckBuyUnit"
		_utbAt = utbinfAtI; _utbRpg = utbinfRPGLAW;
		? upgMatrix select _si select upgInfLevel4 == 2: _utbAt = utbInfAtlv4, _utbRpg = utbInfMglv4
		_unitsBuy = (unitsBuyAI select _si select _utbAt) + (unitsBuyAI select _si select _utbRpg)
		? bool_TZK_SEMod_Mode: _unitsBuy = unitsBuyAI select _si select utbInfMixed2
		_buyNum = 4
		; ask infantry group buy AA vehicle.
		? time > 60*10 && [_si, typesSupport select _si] call funcCountUnits < ("_x select tdSide == _si" count towns) + 2: _unitsBuy = [[typesSupport select _si select 3, 1]], _buyNum = 3
		goto "TypesSelected"
	# mode_planeAT
		? count _giInf < 1: exit
		_giJoin = _giInf select random count _giInf - 0.5
		_slots = maxGroupSize - count units (groupMatrix select _si select _giJoin) - (groupUnitsBuildingMatrix select _si select _giJoin)
		? _slots <= 0: exit
		_unitsBuy = unitsBuyAI select _si select utbPlane
		goto "TypesSelected"
	# mode_nuke
		_giNuke = [_giBuyer] + _giTrans; _i = -1
		# mode_nuke_findGroup
		_giJoin = _giNuke select _i
		_slots = maxGroupSize - count units (groupMatrix select _si select _giJoin) - (groupUnitsBuildingMatrix select _si select _giJoin)
		? _slots <= 0: _i = _i + 1, if(_i < count _giNuke) then {goto "mode_nuke_findGroup"} else {exit}
		_t = typesNuke select _si
		_unitsBuy = [[_t, 1]]
		goto "TypesSelected"
  # mode_default
		; this case won't affect in basic TZK design. This is for other mission modes.
		; ? bool_TZK_SEMod_Mode: goto "SE"
		goto "TypesSelected"
; ============================================================================================================================
# TypesSelected
	? _buyNum <= 0: exit
	_type = _unitsBuy call funcGetRandomUnitType
	? _type == -1: goto "NextBuy"
	_unitDesc = unitDefs select _type
	_cost = _unitDesc select udCost
	_crew = _unitDesc select udCrew
	_driver = 0
	_gunner = 0
	? count _crew == 2: _costCrew = unitDefs select (_crew select 1) select udCost; _driver = 1; _gunner = [0, 1] select (_crew select 0 > 1); _cost = _cost + _driver*_costCrew + _gunner*_costCrew

	? _slots < _driver + _gunner: goto "NextBuy"
	? _money < _cost: goto "NextBuy"

	_factoryType = _unitDesc select udFactoryType; _factoryType = _factoryType call funcBinaryDigit; 
	? count _factoryType == 0: goto "NextBuy"
	_factoryType = _factoryType select random count _factoryType - 0.5
	_factory = [_si, _factoryType, false] call funcGetIdleFactories; if (count _factory == 0) then {_factory = objNull} else {_factory = _factory select random count _factory - 0.5}
	? isNull _factory: goto "NextBuy"
	[[_type, _driver, _gunner, 0, _si, _giJoin, _giBuyer, _factory]] exec localize {TZK_AI_BUY_UNIT}

	# NextBuy
	_buyNum = _buyNum - 1; goto "TypesSelected"