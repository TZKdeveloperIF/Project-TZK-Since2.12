; args: [unit, si, gi, Start Position X, Start Position Y, order of Setting]

_unit = _this select 0
_si = _this select 1
_gi = _this select 2
_posCheckBoardStart = [_this select 3, _this select 4]
_timeCheckBoardStart = _this select 5
_ais = _this select 6
_this = 0

# Update
~ 5

#CheckAir
_typesTransport = airTransport select _si
? (count _typesTransport) == 0 : goto "CheckGround"

_res = [getPos _unit, 500] call funcGetNearbyTransports
_transports = []; _transp = objNull; _i = 0; _c = count _res
#SetAir
	? _i >= _c : goto "AirSet"
	_transp = (_res select _i) select 0; _i = _i + 1
	? isNull driver _transp: goto "SetAir"
	? (damage _transp) > 0.5 || ((getPos _transp) select 2) > 5 || (speed _transp) > 5: goto "SetAir"
	? _transp call funcGetCargoNum >= (_transp call funcGetTranspVol) : goto "SetAir"
	_transports set [count _transports, _transp]; goto "SetAir"
	
	#AirSet
	? (count _transports) == 0 : goto "CheckGround"
	_transp = _transports select (random (count _transports) - 0.5)
	goto "GetIn"

#CheckGround
_typesTransport = groundTransport select _si
? (count _typesTransport) == 0 : goto "NoneFound"
_res = [getPos _unit, 500] call funcGetNearbyTransports
_transports = []; _transp = objNull; _i = 0; _c = count _res
#SetGround
	? _i >= _c : goto "GroundSet"
	_transp = (_res select _i) select 0; _i = _i + 1
	? isNull driver _transp: goto "SetGround"
	? (damage _transp) > 0.5 || ((getPos _transp) select 2) > 5 || (speed _transp) > 5: goto "SetGround"
	? _transp call funcGetCargoNum >= (_transp call funcGetTranspVol) : goto "SetGround"
	_transports set [count _transports, _transp]; goto "SetGround"
	
	#GroundSet
	? (count _transports) == 0 : goto "NoneFound"
	_transp = _transports select (random (count _transports) - 0.5)
	goto "GetIn"

#NoneFound
_unit doMove ([_posCheckBoardStart, 50, 100] call funcGetRandomPos)
~5
if (alive _unit) then {_gi = (groupMatrix select _si) find (group _unit)}; _setting = aiSetting select _si select _gi
? time > _timeCheckBoardStart + (aisPickupWaitTimeDefs select (_setting select _ais)): _unit call busyClear; exit

goto "Update"

#GetIn
_unit doWatch _transp; _offset = 0; _timeAbort = time + 2*60
#GetIn_Check
	_offset = _offset + 10
	_vect = [getPos _unit, getPos _transp] call funcVectorSub
	_dist = (_unit distance _transp)
	? _dist < 0.1 : _dist = _dist + 10
	_posMove = [getPos _transp, [_vect, _offset/_dist] call funcVectorScale] call funcVectorAdd; _posMove set [2,0]
	_unit doMove _posMove
~_dist*0.1
? !(alive _unit) || !(alive _transp) || (speed _transp) > 5 || ((getPos _transp) select 2) > 5 || !(_transp in TransportActivatedVehicles) || time > _timeAbort || _offset >= 50 : goto "NoneFound"
? (_unit distance _transp) > 50 : goto "GetIn_Check"

~2
? !(alive _unit) || !(alive _transp): goto "NoneFound"

; On calling Embark, extra delay is required if wish to execute after having embarked
_delay = [_unit, _transp, "Cargo"] call preprocessFile "Util\Embark.sqf"
~ _delay + 0.2
? !(alive _unit) || _transp != vehicle _unit: unassignVehicle _unit; goto "NoneFound"

_timeAbort = time + 10*60
[_unit, _si, _timeAbort] exec "\TZK_Scripts_4_0_4\Server\Loop\AI_CheckRide.sqs"