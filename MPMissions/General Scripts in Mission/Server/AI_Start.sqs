; args: [unit, si, gi]

? !isServer : exit

_unit = _this select 0; _si = _this select 1; _gi = _this select 2

? _si != si0 && _si != si1: exit
? !((group _unit) in (groupMatrix select _si)): exit
? leader _unit == player: exit
; wait for unit/vehicle data
_delay = 4
~(5 - _delay)

? !(alive _unit) : exit
; disableAI if needed.
_unit allowFleeing 0
;_unit setCombatMode "YELLOW"; _unit setBehaviour "AWARE"; _unit setSpeedMode "FULL"
_unit setCombatMode (aisCombatModeDefs select (aiSetting select _si select _gi select aisCombatMode))
(group _unit) setBehaviour (aisBehaviourDefs select (aiSetting select _si select _gi select aisBehaviour)); _unit setSpeedMode "FULL"

; wait until leader alive.
#LeaderAliveWait
~ _delay
? !alive leader _unit: goto "LeaderAliveWait"

_vehicle = vehicle _unit

; SUPPORT
? _unit == _vehicle : goto "SkipSupport"
_vt = _vehicle call funcGetUnitTypeFromObject
? _vt == -1 : format["ERROR: Vehicle type not found in AI Start sqs script for '%1', treat it as non-support vehicle.", _vehicle] call fDebugLog; goto "SkipSupport"
? (groupCommander select _si) in (groupAiMatrix select _si) : if (_vt in (typesSupport select _si) && _unit == driver _vehicle) then {[_unit, _si, _gi] exec "\TZK_Scripts_4_0_4\Server\AI_PlaceSupportVehicle.sqs"; exit}
#SkipSupport

; Status Level 0: Reclaim
? initStatusMatrix select _si * GroupsNum + _gi select orderTempReclaim select 0 == 0: goto "NoReclaim"
_entry = initStatusMatrix select _si * GroupsNum + _gi select orderTempReclaim
_params = []; _i = 1; while "_i < count _entry" do "_params set [_i - 1, _entry select _i]; _i = _i + 1"
[_unit, _si, _gi, _params] exec format["%1", orderTempDefs select orderTempReclaim select 2]
_delay = 1
#WaitReclaimed
	~ _delay
	_delay = 5
	? !(alive _unit) : exit
	? (_unit call temporaryCheck): goto "WaitReclaimed"
#NoReclaim
; Status Level 0: Occupy
? initStatusMatrix select _si * GroupsNum + _gi select orderTempOccupy select 0 == 0: goto "NoOccupy"
_entry = initStatusMatrix select _si * GroupsNum + _gi select orderTempOccupy
_params = []; _i = 1; while "_i < count _entry" do "_params set [_i - 1, _entry select _i]; _i = _i + 1"
[_unit, _si, _gi, _params] exec format["%1", orderTempDefs select orderTempOccupy select 2]
_delay = 1
#WaitOccupied
	~ _delay
	_delay = 5
	? !(alive _unit) : exit
	? (_unit call temporaryCheck): goto "WaitOccupied"
#NoOccupy

; Status Level 1: Disengage, Set Flight Altitude, Spoof Missile ON, Change Sabot/Heat, Switch Magazine.
; Level 1 commands are instant-trigger-status change. They don't need any delay.
_idx = 0; _types = [orderTempDisengageType, orderTempSetFlightAltitude, orderTempSpoofMissileON, orderTempChangeAmmo, orderTempSwitchMagazine]
#Set_LV1_Status
	_type = _types select _idx
	? initStatusMatrix select _si * GroupsNum + _gi select _type select 0 == 0: goto "Next_LV1_Status"
	_entry = initStatusMatrix select _si * GroupsNum + _gi select _type
	_params = []; _i = 1; while "_i < count _entry" do "_params set [_i - 1, _entry select _i]; _i = _i + 1"
	[_unit, _si, _gi, _params] exec format["%1", orderTempDefs select _type select 2]
	#Next_LV1_Status
	_idx = _idx + 1
	? _idx < count _types: goto "Set_LV1_Status"

; RALLY 1
? groupMatrix select _si select _gi != group _unit: _gi = (groupMatrix select _si) find (group _unit)
? (aiSetting select _si select _gi select aisRallyPoint1) == 0 || _unit != driver _vehicle : goto "NoRally1"
? !(_unit call busyCheck): _unit call busySet
[_unit, _si, _gi, time + 10*60, aisRallyPoint1] exec "Server\Loop\AI_RallyPoint.sqs"
#WaitRallyReached1
	~5
	? !(alive _unit) : exit
	? _unit call busyCheck : goto "WaitRallyReached1"
#NoRally1

; BOARD 1
? groupMatrix select _si select _gi != group _unit: _gi = (groupMatrix select _si) find (group _unit)
? _unit != _vehicle || (aiSetting select _si select _gi select aisPickupWait1) == 0 : goto "NoBoard1"
_timeCheckBoardStart = time
_posCheckBoardStart = getPos _unit
#Board1
? !(_unit call busyCheck): _unit call busySet
[_unit, _si, _gi, _posCheckBoardStart select 0, _posCheckBoardStart select 1, _timeCheckBoardStart, aisPickupWait1] exec "\TZK_Scripts_4_0_4\Server\Loop\AI_CheckBoard.sqs"
#WaitBoardReady1
	~5
	? !(alive _unit) : exit
	? _unit call busyCheck : goto "WaitBoardReady1"
? time > _timeCheckBoardStart + (aisPickupWaitTimeDefs select (aiSetting select _si select (( groupMatrix select _si) find (group _unit)) select aisPickupWait1)): goto "NoBoard1"
? ([getPos _unit, _posCheckBoardStart] call funcDistH) > 200: goto "NoBoard1"
goto "Board1"
#NoBoard1

;*************************Second Rally And Board Procedure**************************
; RALLY 2
? groupMatrix select _si select _gi != group _unit: _gi = (groupMatrix select _si) find (group _unit)
? (aiSetting select _si select _gi select aisRallyPoint2) == 0 || _unit != driver _vehicle : goto "NoRally2"
? !(_unit call busyCheck): _unit call busySet
[_unit, _si, _gi, time + 10*60, aisRallyPoint2] exec "Server\Loop\AI_RallyPoint.sqs"
#WaitRallyReached2
	~5
	? !(alive _unit) : exit
	? _unit call busyCheck : goto "WaitRallyReached2"
#NoRally2

; BOARD 2
? groupMatrix select _si select _gi != group _unit: _gi = (groupMatrix select _si) find (group _unit)
? _unit != _vehicle || (aiSetting select _si select _gi select aisPickupWait2) == 0 : goto "NoBoard2"
_timeCheckBoardStart = time
_posCheckBoardStart = getPos _unit
#Board2
? !(_unit call busyCheck): _unit call busySet
[_unit, _si, _gi, _posCheckBoardStart select 0, _posCheckBoardStart select 1, _timeCheckBoardStart, aisPickupWait2] exec "\TZK_Scripts_4_0_4\Server\Loop\AI_CheckBoard.sqs"
#WaitBoardReady2
	~5
	? !(alive _unit) : exit
	? _unit call busyCheck : goto "WaitBoardReady2"
? time > _timeCheckBoardStart + (aisPickupWaitTimeDefs select (aiSetting select _si select (( groupMatrix select _si) find (group _unit)) select aisPickupWait2)): goto "NoBoard2"
? ([getPos _unit, _posCheckBoardStart] call funcDistH) > 200: goto "NoBoard2"
goto "Board2"
#NoBoard2

; Status Level 3. They're available for particular unit. Delay loop isn't required.
_delay = 0
; Status Level 3: Move Unit
~ _delay
? initStatusMatrix select _si * GroupsNum + _gi select orderTempMoveUnit select 0 == 0: goto "Skip_LV3_Move"
_entry = initStatusMatrix select _si * GroupsNum + _gi select orderTempMoveUnit
_params = []; _i = 1; while "_i < count _entry" do "_params set [_i - 1, _entry select _i]; _i = _i + 1"
[_unit, _si, _gi, _params] exec format["%1", orderTempDefs select orderTempMoveUnit select 2]
; Don't "quit" but check other LV4 status.
_delay = 0.2
#Skip_LV3_Move

; Status Level 4. They're available for particular type. Delay loop isn't required.
_delay = 0.5
; Delay for Lv3 order initial the temporary
; Status Level 4: Transport Duty Type.
~ _delay
? initStatusMatrix select _si * GroupsNum + _gi select orderTempTransportDuty select 0 == 0: goto "Skip_LV4_Transport"
_entry = initStatusMatrix select _si * GroupsNum + _gi select orderTempTransportDuty
_params = []; _i = 1; while "_i < count _entry" do "_params set [_i - 1, _entry select _i]; _i = _i + 1"
[_unit, _si, _gi, _params] exec format["%1", orderTempDefs select orderTempTransportDuty select 2]
; Don't "quit" but check other LV4 status.
_delay = 0.2
#Skip_LV4_Transport

; Status Level 4: Shoot Target Type.
~ _delay
? initStatusMatrix select _si * GroupsNum + _gi select orderTempShootTarget select 0 == 0: goto "Skip_LV4_ShootTarget"
_entry = initStatusMatrix select _si * GroupsNum + _gi select orderTempShootTarget
_params = []; _i = 1; while "_i < count _entry" do "_params set [_i - 1, _entry select _i]; _i = _i + 1"
[_unit, _si, _gi, _params] exec format["%1", orderTempDefs select orderTempShootTarget select 2]
; Don't "quit" but check other LV4 status.
_delay = 0.2
#Skip_LV4_ShootTarget

; Status Level 4: Shoot Big Angle Type. 
~ _delay
? initStatusMatrix select _si * GroupsNum + _gi select orderTempShootBigAngle select 0 == 0: goto "Skip_LV4_ShootBigAngle"
_entry = initStatusMatrix select _si * GroupsNum + _gi select orderTempShootBigAngle
_params = []; _i = 1; while "_i < count _entry" do "_params set [_i - 1, _entry select _i]; _i = _i + 1"
[_unit, _si, _gi, _params] exec format["%1", orderTempDefs select orderTempShootBigAngle select 2]
; Don't "quit" but check other LV4 status.
_delay = 0.2
#Skip_LV4_ShootBigAngle

; Status Level 4: Shoot Target Type.
~ _delay
? initStatusMatrix select _si * GroupsNum + _gi select orderTempHoldTown select 0 == 0: goto "Skip_LV4_HoldTown"
_entry = initStatusMatrix select _si * GroupsNum + _gi select orderTempHoldTown
_params = []; _i = 1; while "_i < count _entry" do "_params set [_i - 1, _entry select _i]; _i = _i + 1"
[_unit, _si, _gi, _params] exec format["%1", orderTempDefs select orderTempHoldTown select 2]
; Don't "quit" but check other LV4 status.
_delay = 0.2
#Skip_LV4_HoldTown

; Status Level 4: Shoot Target Type.
~ _delay
? initStatusMatrix select _si * GroupsNum + _gi select orderTempMoveType select 0 == 0: goto "Skip_LV4_Move"
_entry = initStatusMatrix select _si * GroupsNum + _gi select orderTempMoveType
_params = []; _i = 1; while "_i < count _entry" do "_params set [_i - 1, _entry select _i]; _i = _i + 1"
[_unit, _si, _gi, _params] exec format["%1", orderTempDefs select orderTempMoveType select 2]
; Don't "quit" but check other LV4 status.
_delay = 0.2
#Skip_LV4_Move

_delay = 0
#Quit
~ _delay
? groupMatrix select _si select _gi != group _unit: _gi = (groupMatrix select _si) find (group _unit)
_order = (orderMatrix select _si) select _gi
_script = (orderDefs select (_order select 1)) select 2
[_unit, _si, _gi, _order select 2] exec format["%1", _script]