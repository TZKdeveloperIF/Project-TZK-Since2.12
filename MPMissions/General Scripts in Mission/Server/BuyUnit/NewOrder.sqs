; args: [
;	[typeUnit, driver, gunner, commander, si, giJoin, giBuyer, oFactory]
;	, orderNumber?: number
;	, nCustomWeapon?: number
;	, order reference?: array
; ]
; ============================ About order reference ======================
; Pass the queue item using "reference of array" in OFP script to caller.

_orderDetail = _this select 0
_type = _orderDetail select 0
_driver = _orderDetail select 1
_gunner = _orderDetail select 2
_commander = _orderDetail select 3
_si = _orderDetail select 4
_giJoin = _orderDetail select 5
_giBuyer = _orderDetail select 6
_factory = _orderDetail select 7
_orderNum = if (count _this > 1) then {_this select 1} else {1}
_nCustomWeapon = if (count _this > 2) then {_this select 2} else {-1}

; this index value should keep same as defined in "AI_Leader.sqs" 
_idxOfOrderRef = 3

_bVehicle = false
? _type < maxUnitTypes: if (count (unitDefs select _type select udCrew) > 0) then {_bVehicle = true}

_eachOrderUnitCnt = 0
? !_bVehicle: _eachOrderUnitCnt = 1
? _bVehicle: _eachOrderUnitCnt = _driver; _eachOrderUnitCnt = _eachOrderUnitCnt + _gunner; _eachOrderUnitCnt = _eachOrderUnitCnt + _commander

@ not (mutexBuildingQueue select _si select _giJoin)
mutexBuildingQueue select _si set [_giJoin, true]

_unitsInProgress = groupUnitsBuildingMatrix select _si select _giJoin
_size = count units (groupMatrix select _si select _giJoin) + _unitsInProgress

; -1 means "fill group to full"
? -1 == _orderNum && _eachOrderUnitCnt <= 0: _orderNum = 1
? -1 == _orderNum: _orderNum = ((maxGroupSize - _size) / _eachOrderUnitCnt) call loadFile "Math\Floor.sqf"
? _orderNum > 1: _v = ((maxGroupSize - _size) / _eachOrderUnitCnt) call loadFile "Math\Floor.sqf"; if (_orderNum > _v) then {_orderNum = _v}
? _orderNum < 0: "ERROR: unexpected order num in NewOrder" call fDebugLog; goto "Unlock"

; FullCheck
? 0 == _orderNum || _eachOrderUnitCnt * _orderNum + _size <= maxGroupSize: goto "FullChecked"
	? _orderNum != 1: "WARNING: unexpected full in NewOrder" call fDebugLog
	[_type, _si, _giBuyer, _giJoin] exec (TzkScripts select 158)
	goto "Unlock"
# FullChecked

? isNull _factory || !alive _factory: player globalchat "TODO: send factory destroyed message"; goto "Unlock"

_queues = factoryQueues select _si
_orders = -1
_i = 0; _c = count _queues; _found = false; 
while {_i < _c && !_found} do {if (_queues select _i select 0 == _factory) then {_orders = _queues select _i select 2; _found = true}; _i = _i + 1}
? !_found: "ERROR: factory not found in NewOrder.sqs" call fDebugLog; goto "Unlock"
? isNull _factory|| !alive _factory: "ERROR: factory dont work" call fDebugLog; goto "Unlock"

_qid = qidNext select _si
qidNext set [_si, _qid + _orderNum]

[_type, _si, _giBuyer, _giJoin, _qid, _orderNum] exec "Server\BuyUnit\sQueueAdd.sqs"

_size = _orders call preprocessFile "Algo\CirBuf\size.sqf"
? _size != 1: goto "AddQueue"
	@ !mutexbuildingInUse
	mutexbuildingInUse = true
	buildingsInUse set [count buildingsInUse, _factory]
	mutexbuildingInUse = false
# AddQueue
call preprocessFile "Server\BuyUnit\Add2FactoryQueue.sqf"

_unitsBuilding = (groupUnitsBuildingMatrix select _si select _giJoin) + _eachOrderUnitCnt * _orderNum
groupUnitsBuildingMatrix select _si set [_giJoin, _unitsBuilding]

; if factory is building, the queue length is building one and to be built ones
; if factory isn't building, the queue length is just to be built ones, however this case won't last long
; if factory is idle, the initial size is 0. otherwise in most cases the factory is building units
[_factory, _si, 1 + (_size + _orderNum)] exec "Server\BuyUnit\sQueueLen.sqs"

# Unlock
; invalidated the order
? count _this > _idxOfOrderRef: if (count (_this select _idxOfOrderRef) == 0) then {_this set [_idxOfOrderRef, [-1]]}
mutexBuildingQueue select _si set [_giJoin, false]; exit