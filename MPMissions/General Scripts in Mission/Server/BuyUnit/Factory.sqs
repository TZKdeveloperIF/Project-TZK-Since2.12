; args: [_type, _si, _objects]

? !isServer: exit

_typeStructure = _this select 0
_si = _this select 1
_factory = _this select 2 select 0
_this = -1

@ !mutexFacQueues
mutexFacQueues = true
_queues = factoryQueues select _si

_qi = 0
_c = count _queues
_found = false
while {_qi < _c && !_found} do {if (isNull (_queues select _qi select 0)) then {_found = true; _qi = _qi - 1}; _qi = _qi + 1}

; purchase order is managed by circular buffer but not simple linear array now
_queues set [_qi, [_factory, _typeStructure, call preprocessFile "Algo\CirBuf\create.sqf", -1] ]

; cancelled qids. factoryCancelledQid elements: 0-factory, 1-mutex, 2-cancelled qid array
_cancelledQids = []; factoryCancelledQid select _si set [_qi, [_factory, false, _cancelledQids]]
mutexFacQueues = false

; In general cases aborted order requires remove "building units count",
; but cancelled order doesn't. This step should be done on calcelling
_needClearBuildingCount = true
_getSize = preprocessFile "Algo\CirBuf\size.sqf"

# Wait
	_queues select _qi set [3, -1]
	[_factory, _si, 0] exec "Server\BuyUnit\sQueueLen.sqs"
	
	@ !mutexbuildingInUse
	mutexbuildingInUse = true
	[buildingsInUse, [_factory, objNull]] call preprocessFile "Algo\arraySubtract.sqf"
	mutexbuildingInUse = false

	_orders = _queues select _qi select 2

	# innerLoop
		~ 0.3
		? (_orders call _getSize) <= 0 && not isNull _factory: goto "innerLoop"
	
	? !alive _factory || isNull _factory: goto "BuildingDestroyed"
	? (_orders call _getSize) > 0: goto "BuildUnits"
	goto "Wait"
# BuildUnits
# BuildNextUnit
	? !alive _factory || isNull _factory: goto "BuildingDestroyed"

	_entry = [_orders, 0] call preprocessFile "Algo\CirBuf\at.sqf"
	_type = _entry select 0
	_driver = _entry select 1
	_gunner = _entry select 2
	_commander = _entry select 3
	_giJoin = _entry select 4
	_giBuyer = _entry select 5
	_qid = _entry select 6
	_nCustomWeapon = _entry select 7
	_cancelled = _entry select 8

	_entry resize 1; _entry set [0, 2]
	_orders call preprocessFile "Algo\CirBuf\pop_front.sqf"
	_queues select _qi set [3, _qid]

	? _cancelled: goto "UnitCanceled"

	; queue length: total count of current order and to be built orders
	[_factory, _si, (_orders call _getSize) + 1] exec "Server\BuyUnit\sQueueLen.sqs"

	? _type >= maxUnitTypes: _unitDesc = unitDefs select (utCustom select _si)
	? _type < maxUnitTypes: _unitDesc = unitDefs select _type

	_isVehicle = false
	_mannedUnitTypes = _unitDesc select udCrew
	? ((count _mannedUnitTypes) > 0): _isVehicle = true

	_cost = _unitDesc select udCost
	? -1 != _nCustomWeapon: _enum = (_unitDesc select udModel) call preprocessFile "Util\EnumOfCwv.sqf", _magInfo = call ([{PlaneMagInfo}, {GunshipMagInfo}, {HeliMagInfo}] select _enum); _cwvCost = _magInfo select _nCustomWeapon select 3, if (_cwvCost > _cost) then {_cost = _cwvCost}

	_buildTime = _unitDesc select udBuildTime
  
	_crew = 0
	? !(_isVehicle): goto "SkipVehicleStats"
	_crewType = _mannedUnitTypes select 1
	? (_driver == 1): _crew = _crew + 1; _cost = _cost + ((unitDefs select _crewType) select udCost); _buildTime = _buildTime + ((unitDefs select _crewType) select udBuildTime)
	? (_gunner == 1): _crew = _crew + 1; _cost = _cost + ((unitDefs select _crewType) select udCost); _buildTime = _buildTime + ((unitDefs select _crewType) select udBuildTime)
	? (_commander == 1): _crew = _crew + 1; _cost = _cost + ((unitDefs select _crewType) select udCost); _buildTime = _buildTime + ((unitDefs select _crewType) select udBuildTime)
	#SkipVehicleStats

	_unitsToBuild = 0
	? !(_isVehicle): _unitsToBuild = 1
	? (_isVehicle): _unitsToBuild = _crew

	_grpJoin = (groupMatrix select _si) select _giJoin

	_grpSize = (count units _grpJoin)
	? ((_grpSize + _unitsToBuild) > maxGroupSize): goto "GroupFull"
	
	_money = groupMoneyMatrix select _si select _giBuyer
	? (_money < _cost): goto "NoMoney"
	_spendParam = [_si, _giBuyer, _cost, true, false]
	_spendParam exec (TzkScripts select 167)

	@ _spendParam select 4
	? not (_spendParam select 3): [_si, _giBuyer, -_cost] exec (TzkScripts select 167); goto "NoMoney"
	
	[_type, _si, _giBuyer, _giJoin] exec (TzkScripts select 156)

	_timeBuilt = time + ([_buildTime, 2] select dev); _isBuilding = true
	# buildLoop
		~ 1
		? count units _grpJoin + _unitsToBuild > maxGroupSize: _isBuilding = false
		? time > _timeBuilt: _isBuilding = false
		? count _cancelledQids > 0: goto "OnCancelling"
		? _isBuilding: goto "buildLoop"

	? count units _grpJoin + _unitsToBuild > maxGroupSize: [_si, _giBuyer, -_cost] exec (TzkScripts select 167); goto "GroupFull"

	[_qid, _si, 0] exec "Server\BuyUnit\sQueueRem.sqs"

	? !(alive _factory) || (isNull _factory): [_si, _giJoin, _unitsToBuild] exec "Server\BuyUnit\AsyncFreeBuildingUnitsCount.sqs"; goto "BuildingDestroyed"

	; create object
	call preprocessFile "Server\BuyUnit\Create.sqf"
	
	? (_orders call _getSize) > 1: goto "BuildNextUnit"
	@ !mutexbuildingInUse
	mutexbuildingInUse = true
	[buildingsInUse, [_factory, objNull]] call preprocessFile "Algo\arraySubtract.sqf"
	mutexbuildingInUse = false
	
	? (_orders call _getSize) > 0: goto "BuildNextUnit"

	goto "Wait"

#GroupFull
	[_type, _si, _giBuyer, _giJoin] exec (TzkScripts select 158)
	[_qid, _si, 0] exec "Server\BuyUnit\sQueueRem.sqs"
	goto "UnitNotBuilt"

#NoMoney
	[_type, _si, _giBuyer, _giJoin] exec (TzkScripts select 159)
	[_qid, _si, 0] exec "Server\BuyUnit\sQueueRem.sqs"
	goto "UnitNotBuilt"

# UnitCanceled
	_needClearBuildingCount = false
	goto "UnitNotBuilt"

# UnitNotBuilt
	; judge need clear building count or not stage
	? _needClearBuildingCount: [_si, _giJoin, _unitsToBuild] exec "Server\BuyUnit\AsyncFreeBuildingUnitsCount.sqs"
	; recover status for later orders
	_needClearBuildingCount = true
	
	? (_orders call _getSize) > 1: goto "BuildNextUnit"
	@ !mutexbuildingInUse
	mutexbuildingInUse = true
	[buildingsInUse, [_factory, objNull]] call preprocessFile "Algo\arraySubtract.sqf"
	mutexbuildingInUse = false
	
	? (_orders call _getSize) > 0: goto "BuildNextUnit"
	goto "Wait"

# BuildingDestroyed
	? ((_orders call _getSize) == 0) && !(isNull _factory): goto "Wait"
	? ((_orders call _getSize) == 0) && (isNull _factory): goto "BuildingDeleted"

	_entry = [_orders, 0] call preprocessFile "Algo\CirBuf\at.sqf"
	_type = _entry select 0
	_driver = _entry select 1
	_gunner = _entry select 2
	_commander = _entry select 3
	_giJoin = _entry select 4
	_qid = _entry select 6
	_cancelled = _entry select 8

	_entry resize 1; _entry set [0, 2]
	_orders call preprocessFile "Algo\CirBuf\pop_front.sqf"

	? _cancelled: goto "DestroyOrderProcessed"

	? _type >= maxUnitTypes: _unitDesc = unitDefs select (utCustom select _si)
	? _type < maxUnitTypes: _unitDesc = unitDefs select _type

	_bVehicle = count (_unitDesc select udCrew) > 0
	? not _bVehicle: _unitsToBuild = 1
	? _bVehicle: _unitsToBuild = _driver + _gunner + _commander

	[_si, _giJoin, _unitsToBuild] exec "Server\BuyUnit\AsyncFreeBuildingUnitsCount.sqs"

	[_qid, _si, 0] exec "Server\BuyUnit\sQueueRem.sqs"

	# DestroyOrderProcessed

	goto "BuildingDestroyed"

# BuildingDeleted
	@ !mutexFacQueues
		mutexFacQueues = true
		_orders call preprocessFile "Algo\CirBuf\clear.sqf"
		@ not (factoryCancelledQid select _si select _qi select 1)
			(factoryCancelledQid select _si select _qi select 2) resize 0
			factoryCancelledQid select _si select _qi set [1, false]
		mutexFacQueues = false
	exit

# OnCancelling
	_currentOrderCancelled = false
	@ not (factoryCancelledQid select _si select _qi select 1)
		factoryCancelledQid select _si select _qi set [1, true]
		call preprocessFile "Server\BuyUnit\procCancelIds.sqf"
		_cancelledQids resize 0
		factoryCancelledQid select _si select _qi set [1, false]
	
	? not _currentOrderCancelled: goto "buildLoop"

	[_si, _giBuyer, -_cost] exec (TzkScripts select 167)
	[_si, _giJoin, _unitsToBuild] exec "Server\BuyUnit\AsyncFreeBuildingUnitsCount.sqs"
	goto "UnitCanceled"