; args: [unit, si, gi, bool heal, bool rearm]
_unit = _this select 0
_si = _this select 1
_gi = _this select 2
_heal = _this select 3
_rearm = _this select 4
_this = 0

? _unit != driver vehicle _unit: exit

_autoRepair = (aiSetting select _si select _gi select aisAutoRepair)
_autoRearm = (aiSetting select _si select _gi select aisAutoRearm)
_autoRepairRange = aisAutoSupportRangeDefs select (aiSetting select _si select _gi select aisAutoRepairRange)
_autoRearmRange = aisAutoSupportRangeDefs select (aiSetting select _si select _gi select aisAutoRearmRange)

_v = vehicle _unit 
_vt = -1

; CheckSupportVehicle
? not (_v == _unit && not _heal): goto "skipSoldierRearmOnly"
? _autoRearm != 0: goto "skipSoldierRearmOnly"
_support = [_unit, _si, 512] call preprocessFile "Util\SoldierRearmSupport.sqf"
? isNull _support: goto "skipSoldierRearmOnly"
? _unit distance _support < _autoRearmRange: goto "SupportFound"

# skipSoldierRearmOnly
_res = [getPos _v, _si, typesSupport select _si, [_v]] call funcGetClosestVehicle
_support = _res select 0; _range = 0
if ((_heal && (_autoRepair != 2)) && (_rearm && (_autoRearm != 2))) then {_range = ( [_autoRepairRange, _autoRearmRange] select (_autoRepairRange < _autoRearmRange) )} else {_range = ( [_autoRepairRange, _autoRearmRange] select (_rearm && (_autoRearm != 2)) )}
? (_res select 1) < _range: goto "SupportFound"

? !( _heal && (_autoRepair == 0) ) && !( _rearm && (_autoRearm == 0) ): exit
_res = [getPos _v, siEnemy select _si, typesSupport select (siEnemy select _si), [_v]] call funcGetClosestVehicle
_support = _res select 0
? (_res select 1) < 200: goto "SupportFound"
exit

# SupportFound
_res = 0
@ !mutexCheckSupport
mutexCheckSupport = true
	? -1 != CheckSupportUnits find _unit: mutexCheckSupport = false; exit
	_indexOfUnit = CheckSupportUnits find objNull
	? _indexOfUnit == -1: _indexOfUnit = count CheckSupportUnits
	CheckSupportUnits set [_indexOfUnit, _unit]
mutexCheckSupport = false

_unit call busySet
[_unit, _support] exec "\TZK_Scripts_4_0_4\Server\SendMovingToSupport.sqs"
_posReturn = getPosASL _unit

_timeAbort = time + 2*60

? _unit != _v: _vt = _v call funcGetUnitTypeFromObject; if (_vt == -1) then {goto "Quit"}
? _vt != -1: if ( "Air" countType [_v] > 0 ) then { goto "MoveAir" }

# MoveGround
	[_unit, [getPos _support, 10, 10] call funcGetRandomPos] call funcMoveAI
	~10
	? not (_unit call busyCheck): goto "Quit"
	? !(alive _unit) || _v != (vehicle _unit) || !(alive _support) || time > _timeAbort: goto "Quit"
	? (_v distance _support) > rangeSupport: goto "MoveGround"
goto "SupportReached"

# MoveAir
	_v flyInHeight 150
	# MoveAir_Check
		[_unit, getPos _support] call funcMoveAI
		~5
		? not (_unit call busyCheck): goto "Quit"
		? !(alive _unit) || _v != (vehicle _unit) || !(alive _support) || time > _timeAbort: goto "Quit"
		? ([getPos _v, getPos _support] call funcDistH) > 2*rangeSupport || (speed _v) > 40: goto "MoveAir_Check"
	# Hover
		_v flyInHeight 10
		_posMove = getPos _support
		[_unit, _posMove] call funcMoveAI
		_timeRetry = time + 60
		# Hover_Check
			~5
			? not (_unit call busyCheck): goto "Quit"
			? !(alive _unit) || _v != (vehicle _unit) || !(alive _support): goto "Quit"
			? time > _timeRetry: goto "MoveAir"
			? (_unit distance _support) > 2*rangeSupport: goto "Hover_Check"
goto "SupportReached"

# SupportReached
	doStop _unit
	_v flyInHeight 150
	? _heal: [_unit, _si, _gi, _v, _vt, _support] exec "Server\AI_Heal.sqs"
	? _rearm: [_unit, _si, _gi, _v, _vt, _support] exec "Server\AI_Rearm.sqs"
	~5
	? not (_unit call busyCheck): goto "Quit"
	? _unit == vehicle _unit: goto "Quit"

	_time30 = _time + 30
	# delay30
	~5
	? not (_unit call busyCheck): goto "Quit"
	? _time < _time30: goto "delay30"

	_i = 0
	# RepairCheck
		? damage _v < 0.1 || !_heal: goto "Quit"
		_i = _i + 1
		~5
		? not (_unit call busyCheck): goto "Quit"
		? _i < 7: goto "RepairCheck"
# Quit
	; return to beginning pos if support is not corrupted
	? _unit call busyCheck && _unit call rtsOrderCheck: [_unit, _posReturn] call funcMoveAI
	_unit call busyClear
	@ !mutexCheckSupport
	mutexCheckSupport = true
		CheckSupportUnits set [_indexOfUnit, objNull]
	mutexCheckSupport = false