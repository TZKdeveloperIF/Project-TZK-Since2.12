; args: [unit, si, gi, [wp, vehicle types (defined by ReclaimTypeDefs), reclaim radius, priority seat, duration]]

_unit = _this select 0
_si = _this select 1
_gi = _this select 2
_params = _this select 3

; Get Correct Parameters. Need Pay Attention To Coefficients
_posReclaim = ((wpCO select _si) select (_params select 0))
_typeIndex = (_params select 1)
_radius = 50*((_params select 2) + 1)
_priority = 1 * (_params select 3)
_duration = 30 * ((_params select 4) + 1)

; Check Whether Unit Fits The Parameters Of The Temporary Order
? ([getPos _unit, _posReclaim] call funcDistH) > _radius: exit
_typesReclaim = []; _crewnum = 0; 
? (ReclaimTypeDefs select _typeIndex) == "Transport Car": 	_typesReclaim = typesTransportCar;				_crewnum = 1;
? (ReclaimTypeDefs select _typeIndex) == "Transport Ship": 	_typesReclaim = typesTransportShip; 			_crewnum = 1;
? (ReclaimTypeDefs select _typeIndex) == "Transport APC": 	_typesReclaim = typesTransportAPC; 				_crewnum = 1;
? (ReclaimTypeDefs select _typeIndex) == "Transport Heli": 	_typesReclaim = typesTransportHeli; 			_crewnum = 1;
? (ReclaimTypeDefs select _typeIndex) == "Battle Ship": 	_typesReclaim = typesBattleShip; 				_crewnum = 2;
? (ReclaimTypeDefs select _typeIndex) == "Light Tank": 		_typesReclaim = typesLightTank; 				_crewnum = 2;
? (ReclaimTypeDefs select _typeIndex) == "Heavy Tank": 		_typesReclaim = typesHeavyTank; 				_crewnum = 2;
? (ReclaimTypeDefs select _typeIndex) == "Artillery": 		_typesReclaim = typesHowitzer+typesRocketLauncher; 					_crewnum = 2;
? (ReclaimTypeDefs select _typeIndex) == "AT APC":			_typesReclaim = typesATAPC; 					_crewnum = 2;
? (ReclaimTypeDefs select _typeIndex) == "AA Vehicle":		_typesReclaim = typesAAAPC; 					_crewnum = 2;
? (ReclaimTypeDefs select _typeIndex) == "Kamov":			_typesReclaim = typesKa50; 						_crewnum = 1;
? (ReclaimTypeDefs select _typeIndex) == "Cobra\Apac\Hind":	_typesReclaim = (typesGunshipOrigin+typesGunshipAT) - typesKa50; 							_crewnum = 2;
? (ReclaimTypeDefs select _typeIndex) == "Transports": 		_typesReclaim = typesTransportCar+typesTransportShip+typesTransportAPC+typesTransportHeli;	_crewnum = 1;
? (ReclaimTypeDefs select _typeIndex) == "Tanks": 			_typesReclaim = typesLightTank+typesHeavyTank+typesHowitzer+typesRocketLauncher; 			_crewnum = 2;
? (ReclaimTypeDefs select _typeIndex) == "APCs": 			_typesReclaim = typesATAPC+typesAAAPC; 			_crewnum = 2;
? (ReclaimTypeDefs select _typeIndex) == "Support APC": 	_typesReclaim = typesSupportAPC;				_crewnum = 1;

_vehicle = vehicle _unit
_vt = _vehicle call funcGetUnitTypeFromObject
? _unit != _vehicle: if !(_vt in _typesReclaim) then {exit}; if ((_crewnum == 1 && !isNull driver _vehicle) || (!isNull gunner _vehicle && !isNull driver _vehicle)) then {exit}


; Check Whether Unit In Another Temporary Order (Except For Set Flight Altitude, Clear Temporary Order, Etc)
? _unit call temporaryCheck: exit

; Initialize The Order Script
_timeStart = time; _timeAbort = _timeStart + _duration; _timeUp = _timeStart; _cycle = 30; _loop = 0
_unit call temporarySet


; Wait For Unit Finish Its Busy-Work
#WaitReady
~5
? time > _timeAbort: 	_unit call temporaryClear; exit
? !(_unit call temporaryCheck): exit
? _unit call busyCheck: goto "WaitReady"

; Main Part Of Temporary Order

; Use busy to prevent AI from automatically moving for support in Temporary Reclaim Order
_unit call busySet

_groups = groupMatrix select _si
#Update
	_gi = ( _groups ) find ( (group _unit) )
	_vehicle = vehicle _unit
	_vt = _vehicle call funcGetUnitTypeFromObject
	? _unit != _vehicle: if ((_crewnum == 1 && !isNull driver _vehicle) || (!isNull gunner _vehicle && !isNull driver _vehicle)) then {goto "EOF"}
	? _unit != driver _vehicle: goto "Sleep"

	[ _unit, ([_posReclaim, 50, 50] call funcGetRandomPos) ] call funcMoveStand
	_vehicles = [_posReclaim, 500, _typesReclaim, [], _si] call funcGetNearbyVehicles
	? count _vehicles == 0: goto "Sleep"

	_prio = []; _prio set [0, ReclaimPrioDefs select _priority]; _prio set [1, ReclaimPrioDefs select (1 - _priority)]
	? _crewnum == 1: _prio = ["Driver"]

	_vehiclesReclaim = []; _rnd = 1
	? _crewnum == 2: goto "TwoCrew"
	#OneCrew
	{ if (isNull driver (_x select 0)) then { _vehiclesReclaim set [count _vehiclesReclaim, _x] } } foreach _vehicles
	goto "ReclaimVehicle"

	#TwoCrew
	{ if ( ( count ([driver (_x select 0), gunner (_x select 0)] - [objNull, (_x select 0)]) ) < 2 && ( driver (_x select 0) in units group _unit || gunner (_x select 0) in units group _unit ) ) then { _vehiclesReclaim set [count _vehiclesReclaim, _x] } } foreach _vehicles
	_rnd = [count _vehiclesReclaim, 1] select (count _vehiclesReclaim < 1)
	_vehicles = _vehicles - _vehiclesReclaim
	{ if ( isNull driver (_x select 0) && isNull gunner (_x select 0) ) then { _vehiclesReclaim set [count _vehiclesReclaim, _x] } } foreach _vehicles

	#ReclaimVehicle
	? count _vehiclesReclaim == 0: goto "Sleep"
	? _vt in _typesReclaim: goto "VehicleMoveToArea"
	
	_reclaimVehicle = (_vehiclesReclaim select ((random _rnd) - 0.5)) select 0
	_unit doWatch _reclaimVehicle
	? (_unit distance _reclaimVehicle) < 10: goto "Reached"
		  
	_offset = 0
	_timeMoveAbort = time + 5*60
	#Move_Check
		? ( count ([driver _reclaimVehicle, gunner _reclaimVehicle] - [objNull, _reclaimVehicle]) ) >= 2: goto "Fail"
		_offset = _offset + 10
		_vect = [getPos _unit, getPos _reclaimVehicle] call funcVectorSub
		_dist = _unit distance _reclaimVehicle
		? _dist < 0.1: _dist = _dist + 1
		_posMove = [getPos _reclaimVehicle, [_vect, _offset/_dist] call funcVectorScale] call funcVectorAdd
		_posMove set [2,0]
		[_unit, _posMove] call funcMoveStand

		_timeUp = time + _dist*0.2
		@ ( time > _timeUp || !(_unit call temporaryCheck) )
		? !(_unit call temporaryCheck): goto "EOF"
		? !(alive _unit) || _vehicle != (vehicle _unit) || time > _timeAbort: goto "EOF"

		? time > _timeMoveAbort || _offset >= 50 || !(alive _reclaimVehicle): goto "Fail"
		? (_unit distance _reclaimVehicle) > 50: goto "Move_Check"

	#Reached

	_i = 0
	_func = preprocessFile "Util\CanReclaim.sqf"
	#TrySeat
		unassignVehicle _unit
		? ( count ([driver _reclaimVehicle, gunner _reclaimVehicle] - [objNull, _reclaimVehicle]) ) >= 2: goto "Fail"
		_seat = _prio select _i
		_unit playMove "CombatGetInTank"
		~1
		? !alive _unit || !(_unit call temporaryCheck): goto "EOF"
		? !(alive _reclaimVehicle): goto "Fail"
		; verify
		@ not mutexReclaim
			mutexReclaim = true
			; delay to wait move in order actually done
			~ 0.05
			? [_unit, _reclaimVehicle] call _func: call format ["_unit assignAs%1 _reclaimVehicle; _unit moveIn%1 _reclaimVehicle", _seat]
			mutexReclaim = false
		~2
		? !alive _unit || !(_unit call temporaryCheck): goto "EOF"
		? !(alive _reclaimVehicle): goto "Fail"
		? _reclaimVehicle == (vehicle _unit): goto "Update"
		_i = _i + 1
		? _i < (count _prio): goto "TrySeat"

	#Fail
		unassignVehicle _unit
		[ _unit, ([_posReclaim, 50, 50] call funcGetRandomPos) ] call funcMoveStand
		goto "Update"


	#VehicleMoveToArea
		? !(alive _unit): goto "EOF"
		? vehicle _unit != _vehicle: goto "Update"
		_unit doMove _posReclaim

		_timeUp = time + 10
		@ ( time > _timeUp || !(_unit call temporaryCheck) )
		? !(_unit call temporaryCheck): goto "EOF"
		? !(alive _unit) || _vehicle != (vehicle _unit) || time > _timeAbort: goto "EOF"

		? ([_posReclaim, getPos _unit] call funcDistH) > 100: goto "VehicleMoveToArea"


	_unit commandMove (getPos _unit)
	~1
	doStop _unit

	#WaitForCrew
		? !(alive _unit): goto "EOF"
		? vehicle _unit != _vehicle: goto "Update"
		
		? (_crewnum == 1 && !isNull driver _vehicle) || (!isNull gunner _vehicle && !isNull driver _vehicle): goto "EOF"

		_timeUp = time + 10
		@ ( time > _timeUp || !(_unit call temporaryCheck) )
		? !(_unit call temporaryCheck): goto "EOF"
		? !(alive _unit) || _vehicle != (vehicle _unit) || time > _timeAbort: goto "EOF"
		doStop _unit; goto "WaitForCrew"



; End Of File
#EOF
_unit call busyClear
_unit call temporaryClear
exit


#Sleep
_loop = (time-_timeStart)/_cycle; _loop = 1 + _loop - _loop%1
_timeUp = _loop*_cycle + _timeStart

@ ( time > _timeUp || !(_unit call temporaryCheck) )
? !(_unit call temporaryCheck): goto "EOF"
? !(alive _unit) || _vehicle != (vehicle _unit) || time > _timeAbort: goto "EOF"
goto "Update"