; args: [_unit(object), _si, _gi, _wp, _radius, _target(object), _dispersion, _vt(index), _biggerAngle(enum)]
_unit = _this select 0, _si = _this select 1, _gi = _this select 2
_wp = _this select 3, _radius = _this select 4, _target = _this select 5
_dispersion = _this select 6, _type = _this select 7
_biggerAngle = (if (count _this > 8) then {_this select 8} else {0})
_biggerAngle = (if (_biggerAngle > 0) then {true} else {false})
? bool_TZK_SEMod_Mode: if (_type in types_SE_td) then {_this exec "Extra\Shoot_TD_Server.sqs", exit}
_this = 0





? localize {TZK_ART_406} != "true": [_si, "TZK_Art_4_0_6.pbo isn't detected. Art module inactivated."] exec "Server\Msg\sSvrMsg2Cmd.sqs", exit




_quitCond = {not (_unit call temporaryCheck) || not alive _unit || _vehicle != vehicle _unit}
_msg = ""
_isServer = true; _isVehicle = false; _isStruct = true;



_vehicle = vehicle _unit; _typeName = typeOf _vehicle; _script = "Common\EH\Fired_Art_406.sqs"
? _biggerAngle: _heliH = typeOf _target camCreate [0,0,0]
# CheckDistance
	_distLimit = viewDistance; 
	? upgMatrix select _si select upgLongWeaponRange == 2: _distLimit = 2 * viewDistance; 
	; ? _type in structsOccupiableMortar: _distLimit = viewDistance/13*8; 
	? _unit distance _target > _distLimit: goto "EOF"
	? _unit distance _target < 50: goto "EOF"
	? [_wp, _vehicle] call funcDistH > _radius: goto "EOF"

; PrepareToMove














# PrePareToAttack
	_delay = 0
	_ret = call preprocessFile "Art\AimAndCalcDelay.sqf"
	? not _ret: goto "EOF"
	~ _delay
	
	_weapon = ""
	_ret = call preprocessFile "Art\PrepareWeapon.sqf"
	? not _ret: goto "EOF"
# PreCalculate
	? _unit distance _target > _distLimit: goto "CheckDistance"

	_ammoArray = _vehicle ammoArray _weapon; _equippedMag = ""; _ammoOld = 0;
	_ret = call preprocessFile "Art\PreAnalysis.sqf"
	? not _ret: goto "EOF"

	; _magazines = _vehicle call funcGetNotEmptyMags; _validMags = [_weapon] call funcWeaponValidMags
	_posV = getPosASL _vehicle; _posT = getPosASL _target; _posT set [2, _posT call funcHASL]
	_speed = call preprocessFile "Art\GetInitSpeed.sqf"
	_angle = 0; _angleDelta = 0; _elev = 0; _thetaDelta = 0
	_ret = call preprocessFile "Art\PreCalculate.sqf"
	? not _ret: goto "EOF"

	; outer variables for attack loop
	_delay = 0
	; No reload magazine check. Structures are always local to server so they won't reload mags manually. And TZK equip only 1 mag to each structure.
# AttackCheck
	; 当载具的位置发生了变化 (变化10米以上), 或目标的位置发生了变化, 或弹夹发生了切换, 需要重新回到试射环节.
	? 10 < [_vehicle, _posV] call funcDistH || 10 < [_target, _posT] call funcDistH: goto "PreCalculate"
	_currentMag = _equippedMag
	? _unit distance _target > _distLimit: goto "CheckDistance"
	? _biggerAngle: _posH = [_posT, _posV] call funcVectorSub, _posH set [2, 0], _length = _posH call funcVectorLength, _posH = [_posH, 300/_length] call funcVectorScale, _posH set [2, 300* 1.732], _posH = [_posH, _posV] call funcVectorAdd, _heliH setPosASL _posH

	? _biggerAngle: _vehicle reveal _heliH
	_vehicle reveal _target
	~0.1
	_vehicle doTarget (if _biggerAngle then {_heliH} else {_target})

	~0.1
	? call _quitCond: _msg = ""; goto "EOF"
	? _vehicle knowsAbout _target < 0.01 && _vehicle distance _target > viewDistance: _msg = "Can't locate the target. Order Aborted. Help me spot it again please."; goto "EOF"

	? 0 == _ammoOld: _magazines = _vehicle call funcGetNotEmptyMags; _validMags = [_weapon] call funcWeaponValidMags; if ({_x in _validMags} count _magazines == 0) then {goto "CheckRearm"};

	; _ammoArray is initialized before the loop and updated after having shot while before next loop delay
	? count _ammoArray == 0: _msg = "Order Aborted. Help me ""Reload"" the magazine (via 6-action list) before ask me shoot again."; goto "EOF"
	_currentMag = _ammoArray select 0
	? _currentMag != _equippedMag: goto "PreCalculate"

	; no way in 2.01 to know when will a mag is loaded. Force shoot and wait until shooting actually happen using "_ammoOld"
	~ _delay
	? call _quitCond: _msg = ""; goto "EOF"
	; check ammoarray again since delayed
	_ammoArray = _vehicle ammoArray _weapon
	? count _ammoArray == 0: _msg = "Order Aborted. Help me ""Reload"" the magazine (via 6-action list) before ask me shoot again."; goto "EOF"
	_currentMag = _ammoArray select 0
	? _currentMag != _equippedMag: goto "PreCalculate"

	? not local gunner _vehicle: _delay = 5; goto "AttackCheck"
	? "BLUE" == combatMode _vehicle || "GREEN" == combatMode _vehicle: _delay = 5; goto "AttackCheck"
	; ? 1 == _ammoOld: _reloadMagazine = true

	_ehRev = _vehicle addEventHandler ["Fired",""], _vehicle removeEventHandler ["Fired", _ehRev]
	_vehicle addEventHandler ["Fired", format [{[_this, %1, %2, %3, %4] exec "%5"}, _speed, _angle - _angleDelta + _angleDelta*(random 2), _elev - _thetaDelta + _thetaDelta*(random 2), _ehRev, _script] ]
	_vehicle fire _weapon

	# w8UntilShooted
		_counter = 0
		~ 1
		_ammoArray = _vehicle ammoArray _weapon
		? 0 == count _ammoArray: _msg = "Order Aborted. Help me ""Reload"" the magazine (via 6-action list) before ask me shoot again."; goto "EOF"
		? call _quitCond: _msg = ""; goto "EOF"
		_counter = _counter + 1
		? _counter >= 30: [_si, format ["Verify whether %1 main weapon is loaded, sir. If weapon is ready then reorder me and report a bug to script designer.", _unit]] exec "Server\Msg\sSvrMsg2Cmd.sqs", _counter = 0
		? _ammoArray select 1 == _ammoOld && _ammoOld != 1: goto "w8UntilShooted"

	_ammoOld = _ammoArray select 1
	_delay = (call format ["%1", (_ammoArray select 0) GetWeaponParam "reloadTime"]) * 1.1 + 0.5
	; ? _reloadMagazine: _delay = (call format ["%1", _weapon GetWeaponParam "magazineReloadTime"]) + _delay; _reloadMagazine = false
	_delay = _delay - 1;

	; AttackDone
	~ 0.1
	if _biggerAngle then {_vehicle doWatch _posH} else {_vehicle doWatch _posT}
	goto "AttackCheck"
# CheckRearm
	_vs = [getPos _unit, 50, (typesSupport select si0) + (typesSupport select si1), []] call funcGetNearbyVehicles
	? count _vs == 0: goto "EOF"
	_sup = (_vs select 0) select 0
	_gi = (groupMatrix select _si) find ( (group _unit) )
	_speed = -1; _mag = "";
	_magazines = magazines _vehicle; _validMags = [_weapon] call funcWeaponValidMags; {if (_x in _validMags) then {_mag = _x}} forEach _magazines
	? _mag != "": _speed = substr [_mag, sizeofstr(_mag) - sizeofstr("xxxx_xj400"), sizeofstr(_mag) - sizeofstr("_xj400")]; if !(substr [_speed, 0, 1] in ["0","1","2","3"]) then {_speed = -1} else {_speed = call _speed};
	_delay = [0,3] select (_speed > 0)
	[_unit, _si, _gi, _vehicle, _type, _sup] exec "Server\AI_Rearm.sqs"; [_unit, true] exec "\TZK_Scripts_4_0_4\Server\StopAI.sqs"
	# WaitRearmComplete
		~5
		? !(_unit call temporaryCheck): goto "EOF"
		? !(alive _unit) || _vehicle != vehicle _unit: goto "EOF"
		? !someAmmo _vehicle: goto "WaitRearmComplete"
	~ _delay + 1
	? _speed > 0: [_vehicle, _speed] exec localize {TZK_FUNC_SWITCH_MAG_PRESET}
	goto "PrePareToAttack"

; End Of File
# EOF
	_unit call busyClear
	_unit call temporaryClear
	? _biggerAngle: deleteVehicle _heliH
	? _msg != "": _msg = format ["[%1] ", _unit] + _msg, [_si, _msg] exec "Server\Msg\sSvrMsg2Cmd.sqs"
	exit