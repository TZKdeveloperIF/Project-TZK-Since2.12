; args: [upg, si, gi]
_upg = _this select 0; _si = _this select 1; _gi = _this select 2

_controlCenters = [_si, stComm] call funcGetWorkingStructures
? (count _controlCenters) == 0: exit

? _gi == -1: exit

_minutes = upgDefs select _upg select 2
_cost = upgDefs select _upg select 1

_money = groupMoneyMatrix select _si select _gi
? _money < _cost: exit

; generate order ID
@ not mutexTzkSvrUpg
	mutexTzkSvrUpg = true
	_orderId = TzkSvrUpgOrderId
	TzkSvrUpgOrderId = TzkSvrUpgOrderId + 1
	; No.3 element: order ID; No.4 element: need compare order ID
	_this resize 5; _this set [3, _orderId]; _this set [4, true]
	_validOrder = _this call preprocessFile "Server\Upgrade\AddOrder.sqf"
	mutexTzkSvrUpg = false

? not _validOrder: exit

? upgMatrix select _si select _upg != 0: [_si, _upg, upgMatrix select _si select _upg] exec "Server\Info\UpgState.sqs", exit
[_si, _gi, _cost] exec localize {TZK_MONEY_SERVER_SPEND}

upgMatrix select _si set [_upg, 1]

[_si, _upg, 1] exec "Server\Info\UpgState.sqs"

_timeStart = time
# CheckControlCenters
	~5
	_controlCenters = [_si, stComm] call funcGetWorkingStructures

	? (count _controlCenters) == 0: (upgMatrix select _si) set [_upg, 0]; [_si, _upg, 0] exec "Server\Info\UpgState.sqs"; exit

	; order is cancelled externally
	? -1 == (_this call preprocessFile "Server\Upgrade\ValidOrder.sqf"): exit

	? time < (_timeStart + 60*_minutes): goto "CheckControlCenters"

[_upg, _si, _gi, true] exec "Server\Upgrade\EndWrap.sqs"