; args: [unit,
;	[bigAngle: bool, suggested speed: number, area idx: number, type enum: string, time stamp: number, si: number], 
; 	rts object status (array-reference), rts server id]

_unit = _this select 0; _param = _this select 1; _rtsStatus = _this select 2; _id = _this select 3
_biggerAngle = _param select 0; _suggestedSpeed = _param select 1; _idx = _param select 2; _enum = _param select 3; _si = _param select 5
_this = 0; _param = 0

; rts busy Check
; not realized yet

; rts order stack design
; not realized yet

_unit call preprocessFile "Server\SQF\RtsOrderSet.sqf"
_unit call busyClear
_unit call temporaryClear

; Switch magazine
	? _suggestedSpeed > 0: [vehicle _unit, _suggestedSpeed, _enum] exec "Server\Art\SwitchSpeed.sqs"; _delay = 1
	; ? -2 == _suggestedSpeed: [vehicle _unit, _enum, _idx, _si] exec "Server\Art\SwitchAuto.sqs"
; Shoot Area infomation
	_suffix = if (si0 == _si) then {"W"} else {"E"};
	_markerInfo = call format [{TzkArtSvrArea%1 select _idx}, _suffix];
	_result = call format [{TzkArtSvrAreaAnal%1 select _idx}, _suffix];
; Rts infomation
	_abort = {[_unit, _si, false] exec "Server\Rts\hClear.sqs"}; _bClearRts = false
; Create local target object
	_target = {Target_TZK_xj400} camCreate [0,0,0]; _target setPos [_markerInfo select 0, _markerInfo select 1, 0]
; Get type info in area scripts
	_type = (vehicle _unit) call funcGetUnitTypeFromObject

; Init Art Variables
	? localize {TZK_ART_406} != "true": [_si, "TZK_Art_4_0_6.pbo isn't detected. Art module inactivated."] exec "Server\Msg\sSvrMsg2Cmd.sqs", exit
	_longRangeCoef = 1.5
	; big angle will be invalid when ordering tanks.
	? "Tank" == _enum: _biggerAngle = false; _longRangeCoef = 2

	_quitCond = {not (_unit call rtsOrderCheck) || _id != _rtsStatus select 1 || not alive _unit || _vehicle != vehicle _unit}
	_msg = ""
	_isServer = true; _isVehicle = true; _isStruct = false;

	_vehicle = vehicle _unit; _typeName = typeOf _vehicle; _script = "Common\EH\Fired_Art_406.sqs"
	? _biggerAngle: _heliH = typeOf _target camCreate [0,0,0]
# CheckDistance
	_distLimit = viewDistance;
	? upgMatrix select _si select upgLongWeaponRange == 2: _distLimit = _longRangeCoef * viewDistance;





# PrepareToMove
	_attackPos = getPosASL _vehicle;
	_attackPos set [2, 0]
	? [_attackPos, getPos _target] call funcDistH > _distLimit: _vec = [getPos _target, _attackPos] call funcVectorSub; _len = _vec call funcVectorLength; _attackPos = [_attackPos, [_vec, 1 - 0.9*_distLimit/_len] call funcVectorScale] call funcVectorAdd
	? ([getPos _unit, _attackPos] call funcDistH) < 30: goto "PrePareToAttack"
	; change deployment of howitzer/TOS
	? _typeName in ["TOS1_TZK_xj400", "M109A6G_xj400", "PLZ05_TZK_xj400"] && "_x == {DeploySwitch_xj400}" count magazines _vehicle > 0: [_vehicle, 0] exec "\TZK_Scripts_4_0_4\Common\Effect\DeployChange.sqs"


# CheckPosReached
	_unit doMove _attackPos
	~5
	? call _quitCond: _msg = ""; goto "EOF"
	? ([getPos _unit, _attackPos] call funcDistH) > 30: goto "CheckPosReached"

# PrePareToAttack
	_delay = 0
	_ret = call preprocessFile "Art\AimAndCalcDelay.sqf"
	? not _ret: goto "EOF"
	~ _delay

	_weapon = ""
	_ret = call preprocessFile "Art\PrepareWeapon.sqf"
	? not _ret: goto "EOF"
# PreCalculate
	? _unit distance _target > _distLimit: goto "CheckDistance"

	_ammoArray = _vehicle ammoArray _weapon; _equippedMag = ""; _ammoOld = 0;
	_ret = call preprocessFile "Art\AreaPreAnalysis.sqf"
	? not _ret: goto "EOF"
	_speed = call preprocessFile "Art\GetInitSpeed.sqf"

	; outer variables for attack loop
	_delay = 0; _reloadMagazine = false
	? _suggestedSpeed > 0: _delay = (call format ["%1", _weapon GetWeaponParam "magazineReloadTime"]) + (call format ["%1", ((_vehicle ammoArray _weapon) select 0) GetWeaponParam "reloadTime"]) * 1.1 + 0.5
# AttackCheck
	; Generate target pos for AREA command
	_try = 0; _posT = []
	# GenAreaPos
		_posT = _markerInfo call preprocessFile "Server\Art\AreaRandomPos.sqf"
		_try = _try + 1
		? _try < 3 && ([_posT, _si] call loadFile "Common\SQF\ClosestEnemyCritcalStruct.sqf") select 1 < 50: goto "GenAreaPos"
	? 3 == _try: _posT set [0, _result select 1 select 1]; _posT set [1, _result select 1 select 2]
	_posT set [2, _posT call funcHASL]; _target setPosASL _posT
	
	? _unit distance _target > _distLimit: goto "CheckDistance"

	_posV = getPosASL _vehicle
	_angle = 0; _elev = 0
	_ret = call preprocessFile "Art\AreaCalculate.sqf"
	? not _ret: goto "EOF"

	_currentMag = _equippedMag
	? _biggerAngle: _posH = [_posT, _posV] call funcVectorSub, _posH set [2, 0], _length = _posH call funcVectorLength, _posH = [_posH, 300/_length] call funcVectorScale, _posH set [2, 300* 1.732], _posH = [_posH, _posV] call funcVectorAdd, _heliH setPosASL _posH

	? _biggerAngle: _vehicle reveal _heliH
	_vehicle reveal _target
	~0.1
	_vehicle doTarget (if _biggerAngle then {_heliH} else {_target})

	~0.1
	? call _quitCond: _msg = ""; goto "EOF"
	? _vehicle knowsAbout _target < 0.01 && _vehicle distance _target > viewDistance: _msg = "Can't locate the target. Order Aborted. Help me spot it again please."; goto "EOF"

	? 0 == _ammoOld: _magazines = _vehicle call funcGetNotEmptyMags; _validMags = [_weapon] call funcWeaponValidMags; if ({_x in _validMags} count _magazines == 0) then {goto "CheckRearm"};

	; _ammoArray is initialized before the loop and updated after having shot while before next loop delay
	? count _ammoArray == 0: _msg = "Order Aborted. Help me ""Reload"" the magazine (via 6-action list) before ask me shoot again."; goto "EOF"
	_currentMag = _ammoArray select 0
	? _currentMag != _equippedMag: goto "PreCalculate"

	; no way in 2.01 to know when will a mag is loaded. Force shoot and wait until shooting actually happen using "_ammoOld"
	~ _delay
	? call _quitCond: _msg = ""; goto "EOF"
	; check ammoarray again since delayed
	_ammoArray = _vehicle ammoArray _weapon
	? count _ammoArray == 0: _msg = "Order Aborted. Help me ""Reload"" the magazine (via 6-action list) before ask me shoot again."; goto "EOF"
	_currentMag = _ammoArray select 0
	? _currentMag != _equippedMag: goto "PreCalculate"

	? not local gunner _vehicle: _delay = 5; goto "AttackCheck"
	? "BLUE" == combatMode _vehicle || "GREEN" == combatMode _vehicle: _delay = 5; goto "AttackCheck"
	? 1 == _ammoOld: _reloadMagazine = true

	_ehRev = _vehicle addEventHandler ["Fired",""], _vehicle removeEventHandler ["Fired", _ehRev]
	_vehicle addEventHandler ["Fired", format [{[_this, %1, %2, %3, %4] exec "%5"}, _speed, _angle, _elev, _ehRev, _script] ]
	_vehicle fire _weapon

	# w8UntilShooted
		_counter = 0
		~ 1
		_ammoArray = _vehicle ammoArray _weapon
		? 0 == count _ammoArray: _msg = "Order Aborted. Help me ""Reload"" the magazine (via 6-action list) before ask me shoot again."; goto "EOF"
		? call _quitCond: _msg = ""; goto "EOF"
		_counter = _counter + 1
		? _counter >= 30: [_si, format ["Verify whether %1 main weapon is loaded, sir. If weapon is ready then reorder me and report a bug to script designer.", _unit]] exec "Server\Msg\sSvrMsg2Cmd.sqs", _counter = 0
		? _ammoArray select 1 == _ammoOld && _ammoOld != 1: goto "w8UntilShooted"

	_ammoOld = _ammoArray select 1
	_delay = (call format ["%1", (_ammoArray select 0) GetWeaponParam "reloadTime"]) * 1.1 + 0.5
	? _reloadMagazine: _delay = (call format ["%1", _weapon GetWeaponParam "magazineReloadTime"]) + _delay; _reloadMagazine = false
	_delay = _delay - 1;

	; AttackDone
	~ 0.1
	if _biggerAngle then {_vehicle doWatch _posH} else {_vehicle doWatch _posT}
	goto "AttackCheck"
# CheckRearm
	_vs = [getPos _unit, 1500, (typesSupport select si0) + (typesSupport select si1), []] call funcGetNearbyVehicles
	? count _vs == 0: goto "EOF"
	_distMin = 1500; _sup = objNull
	{ _dist = _unit distance (_x select 0); if (_dist < _distMin) then { _sup = (_x select 0); _distMin = _dist } } foreach _vs
	? isNull _sup: goto "EOF"

	_timeAbort = time + 5*60
	? _typeName in ["TOS1_TZK_xj400", "M109A6G_xj400", "PLZ05_TZK_xj400"] && "_x == {DeploySwitch_xj400}" count magazines _vehicle > 0: [_vehicle, 0] exec "\TZK_Scripts_4_0_4\Common\Effect\DeployChange.sqs"
	{_x doFollow leader _x} forEach crew _vehicle
	~0.1
	#MoveToSupport
		_posMove = [[0,25], (getDir _sup)] call funcVectorRot2D
		_posMove = [getPos _sup, _posMove] call funcVectorSub
		_vehicle doMove _posMove
		~5
		? call _quitCond: _msg = ""; goto "EOF"
		? !(alive _sup): goto "CheckRearm"
		? time > _timeAbort: goto "EOF"
		? (_unit distance _sup) > 30: goto "MoveToSupport"
	_gi = (groupMatrix select _si) find ( (group _unit) )
	_speed = -1; _mag = "";
	_magazines = magazines _vehicle; _validMags = [_weapon] call funcWeaponValidMags; {if (_x in _validMags) then {_mag = _x}} forEach _magazines
	? _mag != "": _speed = substr [_mag, sizeofstr(_mag) - sizeofstr("xxxx_xj400"), sizeofstr(_mag) - sizeofstr("_xj400")]; if !(substr [_speed, 0, 1] in ["0","1","2","3"]) then {_speed = -1} else {_speed = call _speed};
	_delay = [0,3] select (_speed > 0)
	[_unit, _si, _gi, _vehicle, _type, _sup] exec "Server\AI_Rearm.sqs"; [_unit, true] exec "\TZK_Scripts_4_0_4\Server\StopAI.sqs"
	# WaitRearmComplete
		~5
		? call _quitCond: _msg = ""; goto "EOF"
		? !someAmmo _vehicle: goto "WaitRearmComplete"
	~ _delay + 1
	? _speed <= 0: goto "PrepareToMove"
	_delay = 1; [_vehicle, _speed] exec localize {TZK_FUNC_SWITCH_MAG_PRESET}
	# WaitSwitchComplete
		~ _delay
		? call _quitCond: _msg = ""; goto "EOF"
		_delay = 5
		? !someAmmo _vehicle: goto "WaitSwitchComplete"
	goto "PrepareToMove"

; End Of File
# EOF
	deleteVehicle _target
	? _biggerAngle: deleteVehicle _heliH

	? _msg != "": _msg = format ["[%1] ", _unit] + _msg, [_si, _msg] exec "Server\Msg\sSvrMsg2Cmd.sqs"
	? _bClearRts: call _abort
	exit