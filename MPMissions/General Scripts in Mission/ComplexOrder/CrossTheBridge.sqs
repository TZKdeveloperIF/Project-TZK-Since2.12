; ---------------------------------------------------------------------------------------------------
; |									RTS Cross Bridge SQS Script										|
; |		  Units will try cross the assigned bridge. 												|
; ---------------------------------------------------------------------------------------------------

; args: [
; 	unit, 
; 	[
;		bridge project id, near begin pos (bool. decide which endpoint of bridge is the start pos)
;		, move distance (distance to move after having acrossed the bridge), has broken bridge segment
;	],
; 	[order mode (called by AI or player unit), quit condition],
; 	extra parameters for order mode
; ]
_unit = _this select 0

_param = _this select 1
_bridgeId = _param select 0
_nearBeginPos = _param select 1
_moveDistance = _param select 2
_hasBrokenBridge = _param select 3

_modeInfo = _this select 2
_forServer = _modeInfo select 0, _quitCond = _modeInfo select 1

_extraPar = _this select 3
? _forServer: _rtsStatus = _extraPar select 0, _id = _extraPar select 1
? not _forServer: _uid = _extraPar select 0, _id = _extraPar select 1

_msg = ""

? _unit == vehicle _unit: exit
? _unit != driver vehicle _unit: exit

_project = _bridgeId call preprocessFile "Bridge\GetProjectById.sqf";
? count _project <= 0: _msg = "No available bridge."; goto "Quit"

_vehicle = vehicle _unit
? not _hasBrokenBridge: goto "FinishBridgeBrokenLogic"
	_type = _vehicle call funcGetUnitTypeFromObject
	? _type in typesEngineeringVeh || _type in typesMHQ: goto "FinishBridgeBrokenLogic"
	_msg = "Part of bridge is broken. Only MHQ/engineer vehicle will execute the command."; goto "Quit"

# FinishBridgeBrokenLogic

_crossBridgeRadius = 200
	_funcGetValid = "GetValidStatus" call (preprocessFile "Bridge\InfoFunc.sqf")

_headInfo = _project call ("GetHeadInfo" call (preprocessFile "Bridge\InfoFunc.sqf"))
_startPos = _headInfo call ("GetBeginPos" call (preprocessFile "Bridge\InfoFunc.sqf"))
_endPos = _headInfo call ("GetEndPos" call (preprocessFile "Bridge\InfoFunc.sqf"))
? not _nearBeginPos: _startPos = _endPos; _endPos = _headInfo call ("GetBeginPos" call (preprocessFile "Bridge\InfoFunc.sqf"))

_suspendH = TzkBridgeSuspendHeight
; _suspendH meters suspend
_startPos set [2, (_startPos call funcHASL) + _suspendH]
_endPos set [2, (_endPos call funcHASL) + _suspendH]

; chech whether vehicle is on the bridge when order being executed
_onBridge = [_vehicle, _project] call loadFile "\TZK_Patch4_4_0_6\s\Bridge\OnWholeBridge.sqf"
? not _onBridge && ([_unit, _startPos] call funcDistH > _crossBridgeRadius): _msg = format ["%1 %2 %3 %4. %5", localize {TZK_LANG_TOO}, localize {TZK_LANG_FAR}, localize {TZK_LANG_TO}, localize {TZK_LANG_BRIDGE}, localize {TZK_LANG_ORDER_ABORTED}], goto "Quit"

? _onBridge: goto "finishCloseToStartPos"

; force vehicle "ready" before start the script
_counter = 0
_vehicle doMove getPos _vehicle
# ForceReady
	_counter = _counter + 1

	_crews = crew _vehicle, _b = true, {if not (unitReady _x) then {_b = false}} forEach _crews
	? not _b && 2 == _counter % 5: {_x doFollow leader _x} forEach _crews
	? not _b && 19 == _counter % 20: _vehicle groupChat format ["%1 %2 %3 %4. %5 '%6' %7 %8 %9", localize {TZK_LANG_STUCK}, localize {TZK_LANG_IN}, localize {TZK_LANG_CROSS}, localize {TZK_LANG_BRIDGE}, localize {TZK_LANG_ORDER}, localize {STR_SENT_RETURN_TO_FORMATION_2}, localize {TZK_LANG_TO}, localize {TZK_LANG_FREE}, localize {TZK_LANG_ME}]
	~ 0.5

	? call _quitCond: goto "Quit"
	? not _b: goto "ForceReady"

; get close to start pos
? [_vehicle, _startPos] call funcDistH < 50: goto "finishCloseToStartPos"
# getCloseToStartPosLoop
	_vehicle doMove _startPos
	~ 5
	? call _quitCond: goto "Quit"
	? [_vehicle, _startPos] call funcDistH >= 50: goto "getCloseToStartPosLoop"

# finishCloseToStartPos

; if vehicle isn't on the bridge, move vehicle to assigned start position, otherwize request vehicle watch end point
_curVehPosAsl = getPosASL _vehicle; _curVehPosAsl set [2, _suspendH + (_curVehPosAsl select 2)]
? not _onBridge: goto "suspendMoveStartPos"
	_vehicle doWatch _endPos
	_vectorVehToEnd = [_endPos, _curVehPosAsl] call funcVectorSub
	_deltaDir = (direction _vehicle) - (_vectorVehToEnd select 0) atan2 (_vectorVehToEnd select 1)
	_deltaDir = 180 - abs (abs(_deltaDir) % 360 - 180)

	; according to the practice, it seems AI tank require 6 seconds to turn 180 degree
	~ 6 * _deltaDir / 180

	goto "readyToCrossBridge"
# suspendMoveStartPos
	_moveParamCache = [true, true, [_vehicle, _curVehPosAsl, _startPos, 45, false]]
	_moveParamCache exec "Bridge\MoveSuspended.sqs"
	# loopMoveExactlyStart
		~ 1
		? call _quitCond: _moveParamCache set [1, false], goto "Quit"
		? _moveParamCache select 0: goto "loopMoveExactlyStart"

# readyToCrossBridge
; calculate geometry info
	_vehBeginPos = (if _onBridge then {_curVehPosAsl} else {_startPos})

	_suspendMovementUnitVec = ([_endPos, _vehBeginPos] call funcVectorSub) call preprocessFile "Math\UnitVector.sqf"
	_vehEndPos = [_endPos, [_suspendMovementUnitVec, _moveDistance] call funcVectorScale] call funcVectorAdd

; suspend move across the bridge
	_vehicle groupChat format ["%1 %2 %3 %4.", localize {TZK_LANG_PREPARE}, localize {TZK_LANG_TO}, localize {TZK_LANG_CROSS}, localize {TZK_LANG_BRIDGE}]

	_moveParamCache = [true, true, [_vehicle, _vehBeginPos, _vehEndPos, 45, true]]
	_moveParamCache exec "Bridge\MoveSuspended.sqs"
	# loopMoveBridge
		~ 1
		? call _quitCond: _moveParamCache set [1, false], goto "Quit"
		? _moveParamCache select 0: goto "loopMoveBridge"
	
	; todo: add bridge alive check in moving loop
	; if bridges in front of vehicle is broken, the move should stop
	
	_vehicle groupChat format ["%1 %2.", localize {TZK_LANG_BRIDGE}, localize {TZK_LANG_CROSS}]

; move to the end point
	? _forServer: [_unit, [_vehEndPos, getPosASL vehicle _unit], _rtsStatus, _id] exec "Rts\Order\hMove.sqs"
	? not _forServer: [_unit, _vehEndPos, [_uid, id]] exec "OrderSimple\MovePosPpl.sqs"
	goto "Quit"

; End Of File
# Quit
	_si = sides find (side _unit)
	? _msg != "" && _forServer: [_si, format ["%1: %2", _unit, _msg]] exec "Server\Msg\sSvrMsg2Cmd.sqs"
	? _msg != "" && not _forServer: _unit groupChat _msg
	exit