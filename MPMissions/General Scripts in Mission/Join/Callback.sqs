; args: [netIds of actually joined units, value]

; decode
_value = _this select 1
_join2Ai = _value % 2, _value = (_value - _join2Ai) / 2
_join2Ai = (if (1 == _join2Ai) then {true} else {false})

_si = _value % 2
_value = (_value - _si) / 2

_giFrom = _value % GroupsNum
_value = (_value - _giFrom) / GroupsNum

_giTo = _value % GroupsNum
_value = (_value - _giTo) / GroupsNum

_giRequester = _value % GroupsNum
_value = (_value - _giRequester) / GroupsNum

_groupFrom = groupMatrix select _si select _giFrom
_fromAi = _groupFrom in (groupAiMatrix select _si)

? _fromAi && not isServer: exit
? not _fromAi && isNull player: exit
? not _fromAi: if (_si != siPlayer || _giFrom != giPlayer) then {exit}

? not _fromAi: goto "SourcePlayer"
; SourceServer
	; update source group order idx (same effect as order clear)
	_order = orderMatrix select _si select _giFrom; _order set [0, (_order select 0) + 1];
	; on server-to-player case, clear busy/temporary/rts flag
	; maybe we need to do this BEFORE join. Keep on observing
	? not _join2Ai: {_u = UnitById _x, _u call busyClear; _u call temporaryClear} forEach (_this select 0)
	? not _join2Ai: [_this select 0, [_si, true]] exec "Rts\Framework\OrderDtor.sqs"
	exit

# SourcePlayer
	; do nothing
	; Unable to obtain unit in-group id since they've joined to other group
	; unnecessary to remove killed-eh by now
	exit