; args: [_units, _si, _giTo]

; expected server execute this script
? not isServer: exit

_units = _this select 0; _si = _this select 1, _giTo = _this select 2
? count _units <= 0: exit

_seats = ["Driver", "Gunner", "Commander", "Cargo"]; _records = []
_i = 0; _c = count _units
# RecordSeat
	_unit = _units select _i
	_vehicle = vehicle _unit

	_info = [_vehicle, 3]
	? _unit == Commander _vehicle: _info set [1, 2]
	? _unit == Gunner _vehicle: _info set [1, 1]
	? _unit == Driver _vehicle: _info set [1, 0]
	? _unit == _vehicle: _info set [1, -1]
	_records set [_i, _info]

	_i = _i + 1
	? _i < _c: goto "RecordSeat"

; simple delay here. This design is rough, though
; but since we have RTS design, we don't have to require this script to solve all problems
~ 5
_i = 0; _maxDelayValue = 0
# processAssign
	_unit = _units select _i
	? not local _unit: goto "continue"

	_info = _records select _i, _vehicle = _info select 0, _seatIdx = _info select 1
	? _seatIdx != -1: goto "inVehicle"
	; onfoot
		? vehicle _unit != _unit: unassignVehicle _unit; _unit action ["EJECT", _vehicle]
		goto "continue"
	# inVehicle
		_seat = _seats select _seatIdx
		_delay = [_unit, _vehicle, _seat] call preprocessFile "Util\Embark.sqf"
		? _delay > _maxDelayValue: _maxDelayValue = _delay

	# continue
	_i = _i + 1
	? _i < _c: goto "processAssign"
; update group order index after delay assigned
? 0 == _maxDelayValue: exit
~ _maxDelayValue + 1
_order = orderMatrix select _si select _giTo
@ not mutexAIGroup
	mutexAIGroup = true
	_order set [0, (_order select 0) + 1]
	mutexAIGroup = false