; args: [purchase source, custom, costFactor, is preset for player order?: bool, units?: array, pos?: array]

_src = _this select 0
_custom = _this select 1
_costFactor = _this select 2
_preset = (if (count _this > 3) then {_this select 3} else {false})
_units = (if _preset then {_this select 4} else {0})
_pos = (if _preset then {_this select 5} else {0})

_unit = player

? !(alive _unit) || !(alive _src) : exit
_strMOD = "STR_CRCTI_MOD"; if bool_TZK_MF_Mode Then {_strMOD = "STR_CRCTI_Kaos_MOD"}; if bool_TZK_Yugo_Mode Then {_strMOD = "STR_CRCTI_Yugo_MOD"}; if bool_TZK_SEMod_Mode Then {_strMOD = "STR_CRCTI_SE_MOD"};

_cost = 100
_delay = 0.2

? (siPlayer == si0): _notAllowed = [si1, -1]
? (siPlayer == si1): _notAllowed = [si0, -1]

_idcTemplLabel = IDC+0
_idcBuyTempl = IDC+1
_idcBuy = IDC+2

btnAddPrim = false
btnRemPrim = false
btnAddSec = false
btnRemSec = false
btnAddHandgun = false
btnRemHandgun = false
btnAddOptics = false
btnRemOptics = false
btnAddEq = false
btnRemEq = false
nCustom = 0
btnBuyTempl = false
btnSaveTempl = false
btnLoadTempl = false
btnBuy = false
btnClear = false

#WaitNoDialog
@!dialog
~0.2
? dialog : goto "WaitNoDialog"

@!mutexDlg
mutexDlg = true; dlgID = dlgID + 1; _dlgID = dlgID
_dialog = createDialog "EquipmentMenu2"
mutexDlg = false
ctrlShow [IDC_DialogBG_CR, !bool_TZK_DarkSkin]; ctrlShow [IDC_DialogBG_Light, bool_TZK_DarkSkin]

ctrlSetText [_idcTemplLabel, ["Player Loadouts", "Custom Soldiers"] select _custom ]
? _custom : { ctrlShow [_x, false] } foreach [_idcBuyTempl, _idcBuy]
; "preset" buttons

_idcBuyPreset = IDC + 16 * 2 + 0, btnValue00 = -1
_idcExtendBg = _idcBuyPreset + 2
? not (_custom && _preset): {ctrlShow [_idcBuyPreset + _x, false]} forEach [0,1,2]
	
_index = 0
_count = count weaponDefs

#CheckWeapon

	_desc = weaponDefs select _index

	? ((_desc select wdSides) in _notAllowed): goto "CheckNextWeapon"

	_type = _desc select wdType
	? (_type == wtPrimary || _type == wtPrimaryOnly): goto "AddPrimary"
	? (_type == wtHandgun): goto "AddHandgun"
	? (_type == wtSecondary): goto "AddSecondary"
	? (_type == wtBinocular): goto "AddOptics"
	? (_type == wtNVG): goto "AddOptics"
	goto "CheckNextWeapon"
	
	#AddPrimary
		_cost = 0; if (count _desc > wdCost) then { _cost=(_desc select wdCost);};
		_text = format["$%1 %2", _cost, _desc select wdName]
		_id = lbAdd [IDC_LB_PRIM, _text]
		lbSetValue [IDC_LB_PRIM, _id, _index]
		goto "CheckNextWeapon"

	#AddHandgun
		_cost = 0; if (count _desc > wdCost) then { _cost=(_desc select wdCost);};
		_text = format["$%1 %2", _cost, _desc select wdName]
		_id = lbAdd [IDC_LB_HG, _text]
		lbSetValue [IDC_LB_HG, _id, _index]
		goto "CheckNextWeapon"

	#AddSecondary
		_cost = 0; if (count _desc > wdCost) then { _cost=(_desc select wdCost);};
		_text = format["$%1 %2", _cost, _desc select wdName]
		_id = lbAdd [IDC_LB_SEC, _text]
		lbSetValue [IDC_LB_SEC, _id, _index]
		goto "CheckNextWeapon"

	#AddOptics
		_cost = 0; if (count _desc > wdCost) then { _cost=(_desc select wdCost);};
		_text = format["$%1 %2", _cost, _desc select wdName]
		_id = lbAdd [IDC_LB_Opt, _text]
		lbSetValue [IDC_LB_Opt, _id, _index]
		goto "CheckNextWeapon"

	#CheckNextWeapon
	_index = _index + 1
	? (_index < _count): goto "CheckWeapon"
	
_typePrim = -1; _typeHandgun = -1; _typeSec = -1; _typeBinocular = -1; _typeNVG = -1
_equipment = [[],[],[]]
_slots = [isGeneralSlots,isHandgunSlots, -1]

_prim = -1
_sec = -1
_handgun = -1
_primOnly = false

_templLoaded = false

_index = firstEquip
_count = count equipDefs

#AddEquip
	_desc = equipDefs select _index
	? ((_desc select edSides) in _notAllowed): goto "CheckNextEquip"
	_cost = 0; if (count _desc > edCost) then { _cost=(_desc select edCost);};

	_text = format["$%1 %2", _cost, _desc select edName]
	_id = lbAdd [IDC_LB_EQ, _text]
	lbSetValue [IDC_LB_EQ, _id, _index]
	#CheckNextEquip
	_index = _index + 1
	? (_index < _count): goto "AddEquip"

_templLoaded = true
? !_custom : goto "UpdateTempl"
? _custom : goto "UpdateCustom"

_money = groupMoneyMatrix select siPlayer select giPlayer
; goto "UpdateImage"

#Update
	? call dlgUpdated: goto "Quit"
	? !(alive _unit) && !(alive _src) : goto "Quit"

	? _templLoaded : goto "UpdateImage"

	; CHECK PRIMARY CHANGE
	_primLast = _prim
	_prim = lbCurSel IDC_LB_PRIM
	? (_prim == -1 || _prim == _primLast): goto "SkipInitPrim"
		? _primLast != -1 : _type = lbValue [IDC_LB_PRIM, _primLast]; _return = "DefaultAmmoRemovedPrim"; goto "RemoveDefaultAmmo"
		#DefaultAmmoRemovedPrim
		_typePrim = lbValue [IDC_LB_PRIM, _prim]
		_primOnly = (wtPrimaryOnly == ((weaponDefs select _typePrim) select wdType))
		; ctrlEnable[IDC_LB_SEC, !_primOnly]
		? (_primOnly && _typeSec != -1): _type=_typeSec; _typeSec=-1; _return = "DefaultAmmoRemovedPrim"; goto "RemoveDefaultAmmo"
		_ammoList = (weaponDefs select _typePrim) select wdAmmoTypes
		lbClear IDC_LB_PRIM_AMMO
		{_desc=equipDefs select (_x select 0); if !((_desc select edSides) in _notAllowed) Then {_cost = 0; if (count _desc > edCost) then { _cost=(_desc select edCost);}; _text=format["$%1 %2", _cost, _desc select edName]; _id = lbAdd [IDC_LB_PRIM_AMMO, _text]; lbSetValue [IDC_LB_PRIM_AMMO, _id, (_x select 0)]} } foreach _ammoList
		lbSetCurSel [IDC_LB_PRIM_AMMO, 0]
		_type = _typePrim
		_return = "DefaultAmmoAddedPrim"; goto "AddDefaultAmmo"
		#DefaultAmmoAddedPrim
		goto "UpdateImage"
	#SkipInitPrim

	; CHECK HANDGUN CHANGE
	_handgunLast = _handgun
	_handgun = lbCurSel IDC_LB_HG
	? (_handgun == -1 || _handgun == _handgunLast): goto "SkipInitHandgun"
		? _handgunLast != -1 : _type = lbValue [IDC_LB_HG, _handgunLast]; _return = "DefaultAmmoRemovedHandgun"; goto "RemoveDefaultAmmo"
		#DefaultAmmoRemovedHandgun
		_typeHandgun = lbValue [IDC_LB_HG, _handgun]
		_ammoList = (weaponDefs select _typeHandgun) select wdAmmoTypes
		lbClear IDC_LB_HG_AMMO
		{_desc=equipDefs select (_x select 0); if !((_desc select edSides) in _notAllowed) Then {_cost = 0; if (count _desc > edCost) then { _cost=(_desc select edCost);}; _text=format["$%1 %2", _cost, _desc select edName]; _id = lbAdd [IDC_LB_HG_AMMO, _text]; lbSetValue [IDC_LB_HG_AMMO, _id, (_x select 0)]} } foreach _ammoList
		lbSetCurSel [IDC_LB_HG_AMMO, 0]
		_type = _typeHandgun
		_return = "DefaultAmmoAddedHandgun"; goto "AddDefaultAmmo"
		#DefaultAmmoAddedHandgun
		goto "UpdateImage"
	#SkipInitHandgun

	; CHECK SECONDARY CHANGE
	_primOnly = false
	? _typePrim != -1 : _primOnly = (((weaponDefs select _typePrim) select wdType) == wtPrimaryOnly)

	? _primOnly && _typeSec != -1 : _type = lbValue [IDC_LB_SEC, _typeSec]; _typeSec = -1; _return = "UpdateImage"; goto "RemoveDefaultAmmo"
	? _primOnly : goto "SkipInitSec"
	_secLast = _sec
	_sec = lbCurSel IDC_LB_SEC
	? _sec == -1 || _sec == _secLast : goto "SkipInitSec"
		? _secLast != -1 : _type = lbValue [IDC_LB_SEC, _secLast]; _return = "DefaultAmmoRemovedSec"; goto "RemoveDefaultAmmo"
		#DefaultAmmoRemovedSec
		_typeSec = lbValue [IDC_LB_SEC, _sec]
		_ammoList = (weaponDefs select _typeSec) select wdAmmoTypes
		lbClear IDC_LB_SEC_AMMO
		{_desc=equipDefs select (_x select 0); if !((_desc select edSides) in _notAllowed) Then {_cost = 0; if (count _desc > edCost) then { _cost=(_desc select edCost);}; _text=format["$%1 %2", _cost, _desc select edName]; _id = lbAdd [IDC_LB_SEC_AMMO, _text]; lbSetValue [IDC_LB_SEC_AMMO, _id, (_x select 0)]} } foreach _ammoList
		lbSetCurSel [IDC_LB_SEC_AMMO, 0]
		_type = _typeSec
		_return = "DefaultAmmoAddedSec"; goto "AddDefaultAmmo"
		#DefaultAmmoAddedSec
		goto "UpdateImage"
	#SkipInitSec

	_moneynow = groupMoneyMatrix select siPlayer select giPlayer
	_costnow = 0
	? _costFactor > 0 : _costnow = [_typePrim, _typeSec, _typeHandgun, _typeBinocular, _typeNVG, _equipment, _unit, false] call loadFile "\TZK_Scripts_4_0_4\Player\SQF\EquipmentCalculateCost.sqf"
	_costnow = _costFactor*_costnow

	_textplayermoney = format ["$%1", _moneynow]
	_textplayermoneydefine = format ["custom"]

? _custom : ctrlSetText [IDC_TEXT_PLAYER_MONEY_EQUIPMENT, _textplayermoneydefine]
? !_custom : ctrlSetText [IDC_TEXT_PLAYER_MONEY_EQUIPMENT, _textplayermoney]
	ctrlSetText [IDC_TEXT_PLAYER_COST_EQUIPMENT, format ["$%1", _costnow]]

	? (btnAddPrim): btnAddPrim=false; _lb = IDC_LB_PRIM_AMMO; goto "AddOneItem"
	? (btnRemPrim): btnRemPrim=false; _lb = IDC_LB_PRIM_AMMO; goto "RemOneItem"
	? (btnAddSec): btnAddSec=false; _lb = IDC_LB_SEC_AMMO; goto "AddOneItem"
	? (btnRemSec): btnRemSec=false; _lb = IDC_LB_SEC_AMMO; goto "RemOneItem"
	? (btnAddHandgun): btnAddHandgun=false; _lb = IDC_LB_HG_AMMO; goto "AddOneItem"
	? (btnRemHandgun): btnRemHandgun=false; _lb = IDC_LB_HG_AMMO; goto "RemOneItem"
	? (btnAddEq): btnAddEq=false; _lb = IDC_LB_EQ; goto "AddOneItem"
	? (btnRemEq): btnRemEq=false; _lb = IDC_LB_EQ; goto "RemOneItem"
	? (btnAddOptics): btnAddOptics=false; _lb = IDC_LB_Opt; goto "AddOneItem"
	? (btnRemOptics): btnRemOptics=false; _lb = IDC_LB_Opt; goto "RemOneItem"
	? btnSaveTempl && !_custom : btnSaveTempl=false; goto "SaveTempl"
	? btnSaveTempl && _custom : btnSaveTempl=false; goto "SaveCustom"
	? btnLoadTempl && !_custom : btnLoadTempl=false; goto "LoadTempl"
	? btnLoadTempl && _custom : btnLoadTempl=false; goto "LoadCustom"
	? btnBuyTempl && !_custom : btnBuyTempl=false; goto "BuyTempl"
	? btnBuyTempl && _custom : btnBuyTempl=false; goto "BuyCustom"
	? btnValue00 >= 0 && _custom && _preset: _overWrite = btnValue00; btnValue00 = -1; goto "BuyPreset"
	? btnClear : btnClear=false; goto "Clear"
	? btnBuy && !_custom : btnBuy=false; goto "Buy"

	~_delay
	goto "Update"

#UpdateImage
	_templLoaded = false

	_primOnly = false
	? _typePrim != -1 : _primOnly = (((weaponDefs select _typePrim) select wdType) == wtPrimaryOnly)

	? (_typePrim == -1): ctrlSetText [IDC_PIC_PRIM, "\dtaExt\equip\emptygun"]; ctrlSetText [IDC_PIC_PRIM_ONLY, ""]
	? (_typePrim != -1 && _primOnly): ctrlSetText [IDC_PIC_PRIM, ""]; ctrlSetText [IDC_PIC_PRIM_ONLY, (weaponDefs select _typePrim) select wdImage ]
	? (_typePrim != -1 && !_primOnly): ctrlSetText [IDC_PIC_PRIM, (weaponDefs select _typePrim) select wdImage ]; ctrlSetText [IDC_PIC_PRIM_ONLY, ""]

	? (_typeHandgun == -1): ctrlSetText [IDC_PIC_HG, "\misc\gun_empty"]
	? (_typeHandgun != -1): ctrlSetText [IDC_PIC_HG, (weaponDefs select _typeHandgun) select wdImage ]
	
	? (_typeSec == -1): ctrlSetText [IDC_PIC_SEC, "\dtaExt\equip\emptysec"]
	? (_typeSec != -1 && !_primOnly): ctrlSetText [IDC_PIC_SEC, (weaponDefs select _typeSec) select wdImage ]
	? (_typePrim != -1 && _primOnly): ctrlSetText [IDC_PIC_SEC, "" ]
	
	? (_typeBinocular == -1): ctrlSetText [IDC_PIC_OPT + 0, "\dtaext\equip\emptyeq"]
	? (_typeBinocular != -1): ctrlSetText [IDC_PIC_OPT + 0, (weaponDefs select _typeBinocular) select wdImage ]
	? (_typeNVG == -1): ctrlSetText [IDC_PIC_OPT + 1, "\dtaext\equip\emptyeq"]
	? (_typeNVG != -1): ctrlSetText [IDC_PIC_OPT + 1, (weaponDefs select _typeNVG) select wdImage ]
	
	; GENERAL SLOTS
	[0, true, _equipment select isGeneral] call funcSort
	[1, true, _equipment select isGeneral] call funcSort
	_count = count (_equipment select isGeneral); _sortDir = true; _mSize = 0
	? _count > 0 : _mSize = ((_equipment select isGeneral) select (_count-1)) select 1
	? _mSize in [5, 4] : _sortDir = false
	? _mSize == 3 && _sortDir && _count > 1 : if ( (((_equipment select isGeneral) select (_count-2)) select 1) != 3 ) then {_sortDir = false}
	? !_sortDir : [1, _sortDir, _equipment select isGeneral] call funcSort
	
	[_equipment select isGeneral] call loadFile "\TZK_Scripts_4_0_4\Player\SQF\EquipmentUpdateImageGeneral.sqf"

	; HANDGUN SLOTS
	[0, true, _equipment select isHandgun] call funcSort
	[1, true, _equipment select isHandgun] call funcSort
	
	{ ctrlSetText [IDC_PIC_HG_1+_x, ""] } foreach [0,1,2,3]
	{ ctrlSetText [IDC_PIC_HG_2+_x, ""] } foreach [0,1,2]
	{ ctrlSetText [IDC_PIC_HG_3+_x, ""] } foreach [0,1]
	ctrlSetText [IDC_PIC_HG_4, ""]

	_index = 0
	_count = count (_equipment select isHandgun)
	_nextFreeSlot = 0
	? (_count == 0): goto "HandgunEmpty"
	#CheckSlotHandgun
		_typeEq = ((_equipment select isHandgun) select _index) select 0
		_image = (equipDefs select _typeEq) select edImage
		_sizeEq = (equipDefs select _typeEq) select edSlots
		? (_sizeEq == 1): ctrlSetText [IDC_PIC_HG_1 + _nextFreeSlot, _image]; _nextFreeSlot = _nextFreeSlot + _sizeEq
		? (_sizeEq == 2): ctrlSetText [IDC_PIC_HG_2 + _nextFreeSlot, _image]; _nextFreeSlot = _nextFreeSlot + _sizeEq
		? (_sizeEq == 3): ctrlSetText [IDC_PIC_HG_3 + _nextFreeSlot, _image]; _nextFreeSlot = _nextFreeSlot + _sizeEq
		? (_sizeEq == 4): ctrlSetText [IDC_PIC_HG_4, _image]; _nextFreeSlot = _nextFreeSlot + _sizeEq
		_index = _index + 1
		? (_index < _count && _nextFreeSlot < (_slots select isHandgun)): goto "CheckSlotHandgun"
	#HandgunEmpty
	while "_nextFreeSlot < (_slots select isHandgun)" do { ctrlSetText [IDC_PIC_HG_1+_nextFreeSlot, "\misc\mgun_empty"]; _nextFreeSlot=_nextFreeSlot+1 }

	goto "Update"

#RemoveDefaultAmmo
	_ammoList = (weaponDefs select _type) select wdAmmoTypes
	_index = 0
	_count = count _ammoList
	? (_count == 0): goto _return
	#RemoveAmmoType
		_typeAmmo = (_ammoList select _index) select 0
		_typeSlot = (equipDefs select _typeAmmo) select edSlotType
		_list = _equipment select _typeSlot
		_index2 = 0
		{ if ((_x select 0) == _typeAmmo) then { _list set [_index2, 0]}; _index2 = _index2 + 1 } foreach _list
		_list = _list - [0]
		_equipment set[_typeSlot, _list]
		
		_index = _index + 1
		? (_index < _count): goto "RemoveAmmoType"
	goto _return

#AddDefaultAmmo
	_ammoList = (weaponDefs select _type) select wdAmmoTypes
	_index = 0
	_count = count _ammoList
	? (_count == 0): goto _return
	#AddAmmoType
		_typeAmmo = (_ammoList select _index) select 0
		_amount = (_ammoList select _index) select 1
		_sizeAmmo = (equipDefs select _typeAmmo) select edSlots
		_typeSlot = (equipDefs select _typeAmmo) select edSlotType
		? (_amount == 0): goto "CheckNextAmmoType"
		_index2 = 0
		#AddAmmo
			_slotsLeft = _slots select _typeSlot
			{ _slotsLeft = _slotsLeft - ((equipDefs select (_x select 0)) select edSlots)} foreach (_equipment select _typeSlot)
			? (_sizeAmmo <= _slotsLeft): (_equipment select _typeSlot) set [count (_equipment select _typeSlot), [_typeAmmo, _sizeAmmo]]
			_index2 = _index2 + 1
			? (_index2 < _amount): goto "AddAmmo"
		#CheckNextAmmoType
		_index = _index + 1
		? (_index < _count): goto "AddAmmoType"
	goto _return

#AddOneItem
	? (-1 == lbCurSel _lb): goto "Update"
	_typeAmmo = lbValue [_lb, lbCurSel _lb]
	
	? IDC_LB_Opt == _lb: _typeSlot = (weaponDefs select _typeAmmo) select wdType; if (_typeSlot == wtNVG) then {_typeNVG = _typeAmmo} else {_typeBinocular = _typeAmmo}; goto "UpdateImage"
	
	_sizeAmmo = (equipDefs select _typeAmmo) select edSlots
	_typeSlot = (equipDefs select _typeAmmo) select edSlotType
	_slotsLeft = _slots select _typeSlot
	{ _slotsLeft = _slotsLeft - ((equipDefs select (_x select 0)) select edSlots)} foreach (_equipment select _typeSlot)
	? (_sizeAmmo <= _slotsLeft): (_equipment select _typeSlot) set [count (_equipment select _typeSlot), [_typeAmmo, _sizeAmmo]]; goto "UpdateImage"
	goto "Update"

#RemOneItem
	? (-1 == lbCurSel _lb): goto "Update"
	_typeAmmo = lbValue [_lb, lbCurSel _lb]
	
	? IDC_LB_Opt == _lb: _typeSlot = (weaponDefs select _typeAmmo) select wdType; if (_typeSlot == wtNVG) then {_typeNVG = -1} else {_typeBinocular = -1}; goto "UpdateImage"
	
	_typeSlot = (equipDefs select _typeAmmo) select edSlotType
	_list = _equipment select _typeSlot
	_ammoRemoved = false
	_index = 0
	_count = count _list
	while "_index<_count && !_ammoRemoved" do { if (_typeAmmo == (_list select _index) select 0) then { _list set [_index, 0]; _ammoRemoved = true}; _index = _index + 1 }
	? (_ammoRemoved):	_list = _list - [0];	_equipment set[_typeSlot, _list]; goto "UpdateImage"
	goto "Update"

#UpdateTempl
	lbClear IDC_LB_TEMPLATES
	_i = 0
	{ _name = "empty"; if ((count _x) > 0) then { _name = _x select 0 }; lbAdd [IDC_LB_TEMPLATES, format["%1", _name] ]; _i=_i+1 } foreach eqTemplates
  ? lastTemplate != -1 : lbSetCurSel [IDC_LB_TEMPLATES, lastTemplate]
	goto "Update"

#UpdateCustom
	lbClear IDC_LB_TEMPLATES
	_i = 0
	{ _name = "empty"; if ((count _x) > 0) then { _name = _x select 0 }; lbAdd [IDC_LB_TEMPLATES, format["cs%1 %2", _i, _name] ]; _i=_i+1 } foreach infCustom
	? lastCustom != -1 : lbSetCurSel [IDC_LB_TEMPLATES, lastCustom]
	goto "Update"

#SaveTempl
	_id = lbCurSel IDC_LB_TEMPLATES
	? (_id == -1): hint "No Template Slot Selected"; player groupChat "No Template Slot Selected"; goto "Update"

	_nameTempl = [_typePrim, _typeSec, _equipment select isGeneral] call funcGetEqName
	_templ = eqTemplates select _id
	_templ set[0, _nameTempl]
	_templ set[1, _typePrim]
	_templ set[2, _typeHandgun]
	_templ set[3, _typeSec]
	_templ set[4, _typeBinocular]
	_templ set[5, _typeNVG]
	_templ set[6, []]
	_slot = isGeneral; (_templ select 6) set [_slot, []]; { ((_templ select 6) select _slot) set [count ((_templ select 6) select _slot), +_x] } foreach (_equipment select _slot)
	_slot = isHandgun; (_templ select 6) set [_slot, []]; { ((_templ select 6) select _slot) set [count ((_templ select 6) select _slot), +_x] } foreach (_equipment select _slot)
	? ((_templ select 1) == -1 && (_templ select 2) == -1 && (_templ select 3) == -1 && (_templ select 4) == -1 && (_templ select 5) == -1 && count ((_templ select 6) select isGeneral) + count ((_templ select 6) select isHandgun) == 0 ) : _templ resize 0
	
	_entry = format["%1_%2_LOADOUT_%3_%4", localize "STR_CRCTI_VER", localize _strMOD, _id, sideNames select siPlayer]
  unitSetting = "SoldierWB" camCreate [10,10,10]
	[ unitSetting, ["", _typePrim, _typeSec, _typeHandgun, _typeBinocular, _typeNVG, _equipment] ] call funcEquipTempl
  if (count _templ > 0) then {unitSetting saveStatus _entry} else {deleteStatus _entry}
  deleteVehicle unitSetting

  lastTemplate = _id
	goto "UpdateTempl"

#SaveCustom
	_id = lbCurSel IDC_LB_TEMPLATES
	? (_id == -1): hint "No Custom Slot Selected"; player groupChat "No Custom Slot Selected"; goto "Update"

	_nameCustom = [_typePrim, _typeSec, _equipment select isGeneral] call funcGetEqName
	_templ = infCustom select _id
	_templ set [0, _nameCustom]
	_templ set [1, _typePrim]
	_templ set [2, _typeHandgun]
	_templ set [3, _typeSec]
	_templ set[4, _typeBinocular]
	_templ set[5, _typeNVG]
	_templ set[6, []]
	_slot = isGeneral; (_templ select 6) set [_slot, []]; { ((_templ select 6) select _slot) set [count ((_templ select 6) select _slot), +_x] } foreach (_equipment select _slot)
	_slot = isHandgun; (_templ select 6) set [_slot, []]; { ((_templ select 6) select _slot) set [count ((_templ select 6) select _slot), +_x] } foreach (_equipment select _slot)
	? ((_templ select 1) == -1 && (_templ select 2) == -1 && (_templ select 3) == -1 && (_templ select 4) == -1 && (_templ select 5) == -1 && count ((_templ select 6) select isGeneral) + count ((_templ select 6) select isHandgun) == 0 ) : _templ resize 0

	_entry = format["%1_%2_SOLDIER_%3_%4", localize "STR_CRCTI_VER", localize _strMOD, _id, sideNames select siPlayer]

  unitSetting = "SoldierWB" camCreate [10,10,10]
	[ unitSetting, ["", _typePrim, _typeSec, _typeHandgun, _typeBinocular, _typeNVG, _equipment] ] call funcEquipTempl
  if (count _templ > 0) then {unitSetting saveStatus _entry} else {deleteStatus _entry}
  deleteVehicle unitSetting

	; player globalchat format["infCustom = %1", infCustom select _id]
	lastCustom = _id
	goto "UpdateCustom"

#LoadTempl
	_id = lbCurSel IDC_LB_TEMPLATES
	? (_id == -1): hint "No Template Selected"; player groupChat "No Template Selected"; goto "Update"
	? (count(eqTemplates select _id) == 0): hint "Template Not Defined"; player groupChat "Template Not Defined"; goto "Update"
	_templ = eqTemplates select _id
	_typePrim = _templ select 1
	_typeHandgun = _templ select 2
	_typeSec = _templ select 3
	_typeBinocular = _templ select 4
	_typeNVG = _templ select 5

	_equipment = [[],[],[]]

	_slot = isGeneral; { (_equipment select _slot) set [count (_equipment select _slot), +_x]} foreach ((_templ select 6) select _slot)
	_slot = isHandgun; { (_equipment select _slot) set [count (_equipment select _slot), +_x]} foreach ((_templ select 6) select _slot)
	
	? (_typePrim != -1): _found = false; _index = 0; while "not _found" do { if (_typePrim == lbValue[IDC_LB_PRIM, _index]) then { _found=true; lbSetCurSel [IDC_LB_PRIM, _index]; _prim=_index  }; _index=_index+1 }
	? (_typeSec != -1): _found = false; _index = 0; while "not _found" do { if (_typeSec == lbValue[IDC_LB_SEC, _index]) then { _found=true; lbSetCurSel [IDC_LB_SEC, _index]; _sec=_index  }; _index=_index+1 }
	? (_typeHandgun != -1): _found = false; _index = 0; while "not _found" do { if (_typeHandgun == lbValue[IDC_LB_HG, _index]) then { _found=true; lbSetCurSel [IDC_LB_HG, _index]; _handgun=_index  }; _index=_index+1 }
	_templLoaded = true
  lastTemplate = _id
	goto "Update"

#LoadCustom
	_id = lbCurSel IDC_LB_TEMPLATES
	? (_id == -1): hint "No Custom  Selected"; player groupChat "No Custom Selected"; goto "Update"
	? count (infCustom select _id) == 0 : hint "Soldier Not Defined"; player groupChat "Soldier Not Defined"; goto "Update"
	_templ = infCustom select _id
	_typePrim = _templ select 1
	_typeHandgun = _templ select 2
	_typeSec = _templ select 3
	_typeBinocular = _templ select 4
	_typeNVG = _templ select 5

	_equipment = [[],[],[]]

	_slot = isGeneral; { (_equipment select _slot) set [count (_equipment select _slot), +_x]} foreach ((_templ select 6) select _slot)
	_slot = isHandgun; { (_equipment select _slot) set [count (_equipment select _slot), +_x]} foreach ((_templ select 6) select _slot)
	
	? (_typePrim != -1): _found = false; _index = 0; while "not _found" do { if (_typePrim == lbValue[IDC_LB_PRIM, _index]) then { _found=true; lbSetCurSel [IDC_LB_PRIM, _index]; _prim=_index }; _index=_index+1 }
	? (_typeSec != -1): _found = false; _index = 0; while "not _found" do { if (_typeSec == lbValue[IDC_LB_SEC, _index]) then { _found=true; lbSetCurSel [IDC_LB_SEC, _index]; _sec=_index }; _index=_index+1 }
	? (_typeHandgun != -1): _found = false; _index = 0; while "not _found" do { if (_typeHandgun == lbValue[IDC_LB_HG, _index]) then { _found=true; lbSetCurSel [IDC_LB_HG, _index]; _handgun=_index }; _index=_index+1 }
	_templLoaded = true
	lastCustom = _id
	goto "Update"

#BuyTempl
	_id = lbCurSel IDC_LB_TEMPLATES
	? (_id == -1): hint "No Template Selected"; player groupChat "No Template Selected"; goto "Update"
	? (count(eqTemplates select _id) == 0): hint "Template Not Defined"; player groupChat "Template Not Defined"; goto "Update"
	btnBuy = true
	goto "LoadTempl"

#BuyCustom
	_id = lbCurSel IDC_LB_TEMPLATES
	? (_id == -1): hint "No Template Selected"; _unit groupChat "No Template Selected"; goto "Update"
	? (count(infCustom select _id) == 0): hint "Soldier Not Defined"; _unit groupChat "Soldier Not Defined"; goto "Update"
	btnBuy = true
	goto "LoadCustom"

# BuyPreset
	_id = lbCurSel IDC_LB_TEMPLATES
	? (_id == -1): hint "No Template Selected"; _unit groupChat "No Template Selected"; goto "Update"
	? count(infCustom select _id) == 0: hint "Soldier Not Defined"; _unit groupChat "Soldier Not Defined"; goto "Update"

	_cache = [_pos, _id, if (1 == _overWrite) then {true} else {false}]
	{[_x, _cache] exec "Player\Order\BuyEquipment.sqs"} forEach _units
	lastCustom = _id
	goto "Quit"

#Buy
	_money = groupMoneyMatrix select siPlayer select giPlayer
	
	_costnow = 0
	? _costFactor > 0 : _costnow = [_typePrim, _typeSec, _typeHandgun, _typeBinocular, _typeNVG, _equipment, _unit, true] call loadFile "\TZK_Scripts_4_0_4\Player\SQF\EquipmentCalculateCost.sqf"
	_costBuy = _costFactor*_costnow

	? _money < _costBuy && _costBuy > 0: hint "Not Enough Money"; _unit groupChat "Not Enough Money"; goto "Update"
	[_costBuy] exec "\TZK_Scripts_4_0_4\Player\SendMoneySpent.sqs"; _unit groupChat format["Equipment cost: $%1", _costBuy]
	goto "EquipAndExit"

#Clear
	_typePrim = -1; _typeHandgun = -1; _typeSec = -1; _typeBinocular = -1; _typeNVG = -1
	_primOnly = false
	_equipment = [[],[],[]]
	_templLoaded = true
	goto "Update"

#EquipAndExit
	[ _unit, ["", _typePrim, _typeSec, _typeHandgun, _typeBinocular, _typeNVG, _equipment] ] call funcEquipTempl
	? _costFactor == 0 : [_typePrim, _typeSec, _typeHandgun, _typeBinocular, _typeNVG, _equipment] call loadFile "\TZK_Scripts_4_0_4\Player\SQF\EquipmentRecordPurchase.sqf"
	goto "Quit"

# Quit
	? dialog: closeDialog 0
	exit