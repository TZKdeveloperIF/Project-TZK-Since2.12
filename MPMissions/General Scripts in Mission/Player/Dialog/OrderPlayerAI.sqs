; args: [pos, units]
_pos = _this select 0; _units = _this select 1;

? (count _units) == 0: exit

@ !mutexDlg
	mutexDlg = true; dlgID = dlgID + 1; _dlgID = dlgID
	_dlg = createDialog "TZK_OrderAIDialog2"

mutexDlg = false

@ not mutexRtsMouse
	mutexRtsMouse = true
	_id = rtsMouseId
	mutexRtsMouse = false
[true, _id + 1, _pos] exec "Player\Rts\SetRtsMouse.sqs";

? !bool_TZK_CHN_inited && bool_TZK_CHN_Lang: call loadFile localize {TZK_PLAYER_DIALOG_CHNLANG}

ctrlShow [IDC_DialogBG_CR, !bool_TZK_DarkSkin]; ctrlShow [IDC_DialogBG_Light, bool_TZK_DarkSkin]

_idcOrders1 = IDC+0

_idcPar0Label = IDC+1
_idcPar0List = IDC+2
_idcPar1Label = IDC+3
_idcPar1List = IDC+4

_idcPar2Label = IDC+7
_idcPar2List = IDC+8

_bias1 = 4, _offsetOrder1End = -2
call preprocessFile "Player\Dialog\OrderPlayerAi_Init.sqf"

; left down board
_idcLeftDownBtn0 = IDC + 16 * 12 + 0, btnValue02 = -1
ctrlSetText [_idcLeftDownBtn0 + 0, "CrossBridge"]
ctrlSetText [_idcLeftDownBtn0 + 2, "Move Land"]
ctrlSetText [_idcLeftDownBtn0 + 3, "Move Ship"]
; down board
_idcDownBtn0 = IDC + 16 * 6 + 0, btnValue01 = -1
ctrlSetText [_idcDownBtn0 + 0, "DisableMine"]
ctrlSetText [_idcDownBtn0 + 1, "Mine Area"]
; left board
_idcLeftBtn0 = IDC + 16 * 2 + 0, btnValue00 = -1
ctrlSetText [_idcLeftBtn0 + 0, "Shoot Area"]
ctrlSetText [_idcLeftBtn0 + 1, "Switch Magazine"]
ctrlSetText [_idcLeftBtn0 + 2, "Buy Equipment"]
ctrlSetText [_idcLeftBtn0 + 3, "Switch Seat"]
ctrlSetText [_idcLeftBtn0 + 4, "Join"]
; mid buttons
_idcMidBtn0 = IDC + 16 * 14 + 0, btnValue03 = -1
call preprocessFile "Player\Dialog\OrderAiBtns.sqf"

TzkMapRtsFlashingDisabled = true

; "selected Order" means index of listbox. Since there's offset the (index + offset) should be the order id
; _selectedOrder = lastOrder1 - _bias1
; give "-1" value to refresh param list
_selectedOrder = -1

# Update

	? call dlgUpdated: goto "Quit"
	? !(alive player): closeDialog 0; goto "Quit"

	? (_selectedOrder != lbCurSel _idcOrders1): goto "NewOrderSelected"
	? btnSendOrder: btnSendOrder=false, goto "SendOrder"
	? btnSendOrder2: btnSendOrder2=false, goto "SendOrder"

	? btnValue03 >= 0: _val3 = btnValue03; btnValue03 = -1; goto "MidBtn"
	? btnValue02 >= 0: _val2 = btnValue02; btnValue02 = -1; goto "LeftDownBtn"
	? btnValue01 >= 0: _val1 = btnValue01; btnValue01 = -1; goto "DownBtn"
	? btnValue00 >= 0: _val0 = btnValue00; btnValue00 = -1; goto "LeftBtn"

	~ 0.2
	goto "Update"
# Quit
	TzkMapRtsFlashingDisabled = false
	[false, _id + 2] exec "Player\Rts\SetRtsMouse.sqs"; exit

# MidBtn
	? 0 == _val3: {[_x, _pos] exec localize {TZK_ORDER_PLAYER_SUPPORT_OPT_REARM}} forEach _units; closeDialog 0; goto "Quit"
	? 1 == _val3: {[_x, _pos] exec "Player\Order\Support ForceRearm.sqs"} forEach _units; closeDialog 0; goto "Quit"
	? 2 == _val3: [_units, _pos] exec "Player\Dialog\OrderBoard.sqs"; closeDialog 0; goto "Quit"
	? 3 == _val3: {[_x, _pos] exec "\TZK_Scripts_4_0_4\Player\Order\MovePos.sqs"} forEach _units; closeDialog 0; goto "Quit"

	? 4 == _val3: {_x exec "Player\Order\Clear.sqs"} forEach _units; closeDialog 0; goto "Quit"
	? 5 == _val3: _units exec "Player\Disband.sqs"; closeDialog 0; goto "Quit"
	goto "Update"
# LeftDownBtn
	? 0 == _val2 || 2 == _val2 || 3 == _val2: if ((markerPos "TzkRtsAreadiagonal") select 0 == 0) then {hint "Please draw line first.", goto "Update"}
	? 0 == _val2: _units call preprocessFile "Rts\Order\CrossTheBridge.sqf"; closeDialog 0; goto "Quit"
	? 2 == _val2: _units call preprocessFile "Rts\Order\ForceMoveLandVehicle.sqf"; closeDialog 0; goto "Quit"
	? 3 == _val2: _units call preprocessFile "Rts\Order\ForceMoveShip.sqf"; closeDialog 0; goto "Quit"
	goto "Update"
# DownBtn
	? 0 == _val1: _units exec "Player\Order\RtsPreDisable.sqs"; closeDialog 0; goto "Quit"
	? 1 == _val1: _units exec "Player\Order\RtsPreMineArea.sqs"; closeDialog 0; goto "Quit"
	goto "Update"
# LeftBtn
	? 0 == _val0: [_units, _pos] exec "Player\Order\PreShootArea.sqs"; closeDialog 0; goto "Quit"
	? 1 == _val0: _units exec "Player\Order\PreSwitchMag.sqs"; closeDialog 0; goto "Quit"
	? 2 == _val0: [_units, _pos] exec "Player\Order\PreBuyEquip.sqs"; closeDialog 0; goto "Quit"
	? 3 == _val0: _units exec "Player\Order\PreSwitchSeat.sqs"; closeDialog 0; goto "Quit"
	? 4 == _val0: [_units] exec "Join\Submenu\PplOrder.sqs"; closeDialog 0; goto "Quit"
	goto "Update"

# SendOrder
	? lastOrder1 == -1: hint "No order selected", goto "Update"

	; ignore invalidated item
	? lastOrder1 >= 0 && lastOrder1 <= 3 || lastOrder1 > 16: goto "Update"

	_params = []
	? (count (_order select 1)) >= 1: _params set [0, lbCurSel _idcPar0List]
	? (count (_order select 1)) >= 2: _params set [1, lbCurSel _idcPar1List]
	? (count (_order select 1)) >= 3: _params set [2, lbCurSel _idcPar2List]
	closeDialog 0
	~0.1
	_order = aiOrders1 select lastOrder1
	_script = format["%1", _order select 3]
	? _order select 2: [_units, _pos, _params] exec _script; goto "Quit"
	{ [_x, _pos, _params] exec _script } forEach _units
	goto "Quit"

# NewOrderSelected
	_selectedOrder = lbCurSel _idcOrders1; lastOrder1 = _selectedOrder + _bias1
	_order = aiOrders1 select (_selectedOrder + _bias1)

	; ctrlSetText [_idcOrderDesc, (_order select 4) call funcLocStr]

	_params = _order select 1

	{ ctrlShow [_x, count _params >= 1] } forEach [_idcPar0Label, _idcPar0List]
	{ ctrlShow [_x, count _params >= 2] } forEach [_idcPar1Label, _idcPar1List]
	{ ctrlShow [_x, count _params >= 3] } forEach [_idcPar2Label, _idcPar2List]

	? count _params == 0: goto "Update"
	? count _params >= 1: _par = _params select 0; ctrlSetText [_idcPar0Label, _par select 0]; lbClear _idcPar0List; _i=0; while "_i < (_par select 1)" do { lbAdd [_idcPar0List, _i call (_par select 2)]; _i=_i+1 }; lbSetCurSel [_idcPar0List, _par select 3]
	? count _params >= 2: _par = _params select 1; ctrlSetText [_idcPar1Label, _par select 0]; lbClear _idcPar1List; _i=0; while "_i < (_par select 1)" do { lbAdd [_idcPar1List, _i call (_par select 2)]; _i=_i+1 }; lbSetCurSel [_idcPar1List, _par select 3]
	? count _params >= 3: _par = _params select 2; ctrlSetText [_idcPar2Label, _par select 0]; lbClear _idcPar2List; _i=0; while "_i < (_par select 1)" do { lbAdd [_idcPar2List, _i call (_par select 2)]; _i=_i+1 }; lbSetCurSel [_idcPar2List, _par select 3]
	goto "Update"
