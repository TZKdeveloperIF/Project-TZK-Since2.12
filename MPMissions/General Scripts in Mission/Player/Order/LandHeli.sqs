; args: [unit, pos, []]

_unit = _this select 0; _this = 0

? not alive _unit: exit
_vehicle = vehicle _unit
? _unit != driver _vehicle: exit
? 0 == "Helicopter" countType [_vehicle]: exit

_unit groupChat "Roger, landing helicopter."

_vehicle land {LAND}

_timeAbort = _time + 60
# simpleLoop
	~ 5
	? not alive _unit: exit
	? call orderCheck: exit
	? _vehicle != vehicle _unit: exit
	? _time > _timeAbort: exit

	_vehicle land {LAND}
	? (getPos _vehicle) select 2 > 3: goto "simpleLoop"

? _unit != driver _vehicle: exit

_timeAbort = _time + 10
# preciselyLoop
	~ 0.5
	? not alive _unit: exit
	? call orderCheck: exit
	? _vehicle != vehicle _unit: exit
	? _time > _timeAbort: exit

	doStop _unit; _vehicle land {LAND}; _unit action ["ENGINEOFF", _vehicle]; _vehicle engineOn false
	? (getPos _vehicle) select 2 > 2 || isEngineOn _vehicle: goto "preciselyLoop"

_timeAbort = _timeAbort + 3
# postCheck
	~ 0.5
	? not alive _unit: exit
	? call orderCheck: exit
	? _vehicle != vehicle _unit: exit

	? isEngineOn _vehicle: doStop _unit; _vehicle land {LAND}; _unit action ["ENGINEOFF", _vehicle]; _vehicle engineOn false
	? _time < _timeAbort: goto "postCheck"

; final check
	? call orderCheck || not isEngineOn _vehicle: exit
	? (getPos _vehicle) select 2 > 3: _timeAbort = _time + 60; goto "simpleLoop"
	_timeAbort = _time + 10; goto "preciselyLoop"