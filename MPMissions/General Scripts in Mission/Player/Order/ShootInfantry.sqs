; args: [unit, marker, target, command type(enum), dispersion, (bigger angle)]
? localize {TZK_ART_406} != "true": hint "TZK_Art_4_0_6.pbo isn't detected. Art module inactivated.", exit

_unit = _this select 0
_si = siPlayer; _uid = [_unit, _si, giPlayer] call funcCalcUID
? _uid > 12: hint "Fail to get UID, order not set. Try again please."; exit
_id = (playerOrderID select _uid) + 1; [_uid, _id] exec "\TZK_Scripts_4_0_4\Player\Order\New.sqs"
? !(_unit in PlayerShootingUnits): PlayerShootingUnits set [_uid, _unit]

_marker = _this select 1; _target = _this select 2
_dispersion = _this select 4; _commandType = _this select 3
_biggerAngle = (if (count _this > 5) then {_this select 5} else {0})
_biggerAngle = (if (_biggerAngle > 0) then {true} else {false})

_this = 0
_speed = 0; _range = 0; _text = ""; _weapon = ""; _weaponCheck = ""; _rldTime = 0; _fireCommand = ""
_validMags = []
call preprocessFile "Art\InitSoldierScript.sqf"

_quitCond = {call orderCheck || not alive _unit || _vehicle != vehicle _unit}
_msg = ""
_isServer = false; _isVehicle = false; _isStruct = false;

_vehicle = vehicle _unit; _typeName = typeOf _vehicle; _script = "Common\EH\Fired_Art_406.sqs"
? _biggerAngle: _heliH = typeOf _target camCreate [0,0,0]
# CheckDistance
	_posOnOrdered = getPosASL _vehicle; _distLimit = _range + 350; _hint = "Target is too far for infantry " + _text + ". Order aborted."
	? ([_unit, _target] call funcDistH) > _distLimit: _unit groupChat _hint; goto "EOF"





_posCorrect = 0
# PrepareToMove
	? _unit distance _target < _range * (10 - _posCorrect) / 10: goto "PrePareToAttack"
	? _posCorrect >= 10: _msg = "Can't find attack pos. Order aborted.", goto "EOF"
	_vector = [getPosASL _target, _posOnOrdered] call funcVectorSub; _dist = ([_posOnOrdered, getPosASL _target] call funcDistH) - _range*8/9
	_vector = [_vector, _dist/(_dist+_range*8/9)] call funcVectorScale;
	_destination = [_posOnOrdered, _vector] call funcVectorAdd
	_destination = [[[getPosASL _target, _destination] call funcVectorSub, _posCorrect / 10] call funcVectorScale, _destination] call funcVectorAdd
	_dist = [_destination, _target] call funcDistH; _dist = _dist - _dist % 1
	_unit groupChat format ["Too far away. Moving to get close enough (about %1 meters).", _dist]; _timeStart = time; _timeHint = _timeStart + 5*60; 
	_hint = {[{I've been running for %1 minutes. Distance %2 meters now.}, (_timeHint -_timeStart)/60, (_unit distance _target) - (_unit distance _target)%1]}

# CheckPosReached
	_unit doMove _destination
	~2
	? call _quitCond: _msg = ""; goto "EOF"
	? time > _timeHint: call format _hint; _timeHint = _timeHint + 5*60
	? _unit distance _target > _range: goto "CheckPosReached"
# PrePareToAttack
	_delay = 0
	_ret = call preprocessFile "Art\AimAndCalcDelay.sqf"
	? not _ret: goto "EOF"																																							
	~ _delay

	; weapon is prepared in infantry script

# PreCalculate
	? _unit distance _target > _range: goto "CheckDistance"

	_ammoArray = _vehicle ammoArray _weapon; _equippedMag = ""
	_ret = call preprocessFile "Art\PreAnalysis.sqf"
	? not _ret: goto "EOF"

	_posV = getPosASL _vehicle; _posT = getPosASL _target; _posT set [2, _posT call funcHASL]
	; infantry speed has been pre-defined
	_angle = 0; _angleDelta = 0; _elev = 0; _thetaDelta = 0
	_ret = call preprocessFile "Art\PreCalculate.sqf"
	? not _ret && _unit distance _target >= _range / 2: _posCorrect = _posCorrect + 1; goto "PrepareToMove"
	? not _ret: goto "EOF"

	; outer variables for attack loop
	_delay = 0
	; For TZK customed GL, the "muzzle" using same name as "weapon". Thus unnecessary to worry about GL in TZK. Check it in more general way.
	_magazines = _unit call funcGetNotEmptyMags; _numOfMagLast = 1 + ("_x in _validMags" count _magazines)
# AttackCheck
	; 当载具的位置发生了变化 (变化10米以上), 或目标的位置发生了变化, 或弹夹发生了切换, 需要重新回到试射环节.
	? 10 < [_vehicle, _posV] call funcDistH || 10 < [_target, _posT] call funcDistH: goto "PreCalculate"
	? _unit distance _target > _range: goto "PrepareToMove"
	? _biggerAngle: _posH = [_posT, _posV] call funcVectorSub, _posH set [2, 0], _length = _posH call funcVectorLength, _posH = [_posH, 600/_length] call funcVectorScale, _posH set [2, 600 * 1.732], _posH = [_posH, _posV] call funcVectorAdd, _heliH setPosASL _posH

	? _biggerAngle: _vehicle reveal _heliH
	_vehicle reveal _target
	~0.1
	_vehicle doTarget (if _biggerAngle then {_heliH} else {_target})
	; Rearm check should be placed in loop below, due to time cost of animation.
	
	; delay must be correctly assigned for "fire" command.
	# WaitUntilReload
		; For soldier weapon, the reload time should be calculated manually, considering the reload animation time cost.
		~ _delay
		_delay = _rldTime
		? call _quitCond: _msg = ""; goto "EOF"
		? "_x in _validMags" count _magazines == 0: goto "CheckRearm"
		
		_magazines = _unit call funcGetNotEmptyMags
		? ("_x in _validMags" count _magazines) >= _numOfMagLast && _unit ammo _weapon < 1: goto "WaitUntilReload"
	
	; check ammoarray again since delayed
	_ammoArray = _vehicle ammoArray _weapon
	? count _ammoArray == 0: _msg = "No available magazine. Order aborted. Rearm me please, sir."; goto "EOF"
	_currentMag = _ammoArray select 0
	? _currentMag != _equippedMag: goto "PreCalculate"

	_numOfMagLast = "_x in _validMags" count _magazines
	; what if magazine changed? sure the elevation will change too.
	
	_ehRev = _vehicle addEventHandler ["Fired",""], _vehicle removeEventHandler ["Fired", _ehRev]
	_vehicle addEventHandler ["Fired", format [{[_this, %1, %2, %3, %4] exec "%5"}, _speed, _angle - _angleDelta + _angleDelta*(random 2), _elev - _thetaDelta + _thetaDelta*(random 2), _ehRev, _script] ]
	[_vehicle, _weapon] call _fireCommand
	
	; AttackDone
	~0.1
	if _biggerAngle then {_vehicle doWatch _posH} else {_vehicle doWatch _posT}
	goto "AttackCheck"
# CheckRearm
	_magData = (_unit call funcGetRearmData) select 1
	_sup = [_unit, _si, 512, true] call preprocessFile "Util\SoldierRearmSupport.sqf"
	? isNull _sup: _unit groupChat "No support vehicle within 512 meters. Magazines exhausted. Order aborted."; goto "EOF"
	_unit groupChat "Moving to support vehicle for more magazines."

	_timeAbort = time + 15*60
	# MoveToSupport
		_posMove = [[0, 5], (getDir _sup)] call funcVectorRot2D
		_posMove = [getPos _sup, _posMove] call funcVectorSub
		_unit doMove _posMove
		~5
		? call _quitCond: _msg = ""; goto "EOF"
		? !(alive _sup): goto "CheckRearm"
		? time > _timeAbort: _unit groupChat "Cost too much time. Unable to reach support vehicle. Order aborted."; goto "EOF"
		? (_unit distance _sup) > 10: goto "MoveToSupport"
	_unit groupChat "Rearming at support vehicle."; [_unit, _sup] exec "Player\Rearm.sqs"; doStop _unit
	# WaitRearmComplete
		~5
		? call _quitCond: _msg = ""; goto "EOF"
		? !someAmmo _vehicle: goto "WaitRearmComplete"
	_posCorrect = 0; goto "PrepareToMove"

# EOF
	PlayerShootingUnits set [_uid, objNull]
	? _biggerAngle: deleteVehicle _heliH
	? _msg != "": _unit groupChat _msg
	exit