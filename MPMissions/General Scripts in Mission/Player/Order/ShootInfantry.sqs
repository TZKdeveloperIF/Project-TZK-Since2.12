; args: [unit, marker, target, command type(enum), dispersion, (bigger angle)]
_unit = _this select 0
_si = siPlayer; _uid = [_unit, _si, giPlayer] call funcCalcUID
? _uid > 12: hint "Fail to get UID, order not set. Try again please."; exit
_id = (playerOrderID select _uid) + 1; [_uid, _id] exec "\TZK_Scripts_4_0_4\Player\Order\New.sqs"
? !(_unit in PlayerShootingUnits): PlayerShootingUnits set [_uid, _unit]

_marker = _this select 1; _target = _this select 2
_dispersion = _this select 4; _commandType = _this select 3
_biggerAngle = (if (count _this > 5) Then {_this select 5} Else {0})
_this = nil
; enum commandType {throw, grenadeL, mortar};
_speed = [22, 60, 70] select _commandType; _range = [60, 150, 450] select _commandType; _text = ["Throw", "Grenade", "Mortar"] select _commandType
_weapon = ["Throw", primaryWeapon _unit, primaryWeapon _unit] select _commandType
_weaponCheck = [ {_this hasWeapon "Throw"}, {(primaryWeapon _this) in ["M16GrenadeLauncher_TZK_xj400", "AK74GrenadeLauncher_TZK_xj400", "M4_M203_ACOG_SD_xj400", "AK74M_GP25_1P29_SD_xj400", "MM1", "6G30"]}, {(primaryWeapon _this) in ["M16MortarLauncher_TZK_xj400", "AK74MortarLauncher_TZK_xj400"]} ] select _commandType
_validMags = [ [{HandGrenade}, {SmokeShell}, {SmokeShellGreen}, {SmokeShellRed}], ["GrenadeLauncher", "GP25_Grenade_xj400", "GP25_Vest_xj400", "M203_Grenade_xj400", "M203_Vest_xj400", "MM1Magazine", "6G30Magazine", primaryWeapon _unit], ["M16MortarLauncher_TZK_xj400", "AK74MortarLauncher_TZK_xj400"] ] select _commandType
_rldTime = [3.5, if (_weapon == "MM1" || _weapon == "6G30") Then {0.6} Else {5.5}, 5.5] select _commandType
_fireCommand = ["(_this select 0) fire (_this select 1)", "(_this select 0) fire (_this select 1)", "(_this select 0) fire [_this select 1, _this select 1, _this select 1]"] select _commandType

_vehicle = vehicle _unit; _typeName = typeOf _vehicle; _script = "Common\EH\Fired_ReviseShellDir.sqs"
? _biggerAngle > 0: _heliH = typeOf _target camCreate [0,0,0]; _script = "Common\EH\Fired_ReviseShell_BigAngle.sqs"
; CheckDistance
_posOrdered = getPosASL _vehicle; _distLimit = _range + 350; _hint = "Target is too far for infantry " + _text + ". Order aborted."
? ([_unit, _target] call funcDistH) > _distLimit: _unit groupChat _hint; goto "EOF"


#PrepareToMove
_unit doMove _posOrdered
? _unit distance _target < _range: goto "PrePareToAttack"
	_unit groupChat format ["Too far away. Moving to get close enough (about %1 meters).", _range]; _timeStart = time; _timeHint = _timeStart + 5*60; 
	_hint = {["I've been running for %1 minutes. Distance %2 meters now.", (_timeHint -_timeStart)/60, (_unit distance _target) - (_unit distance _target)%1]}






#CheckPosReached
	_vector = [getPos _target, getPos _unit] call funcVectorSub; _dist = (_unit distance _target) - _range*8/9
	_vector = [_vector, _dist/(_dist+_range*8/9)] call funcVectorScale; _destination = [getPos _unit, _vector] call funcVectorAdd
	_unit doMove _destination
	~5
	? call orderCheck: goto "EOF"
	? !(alive _unit) || _unit != vehicle _unit: goto "EOF"
	? time > _timeHint: call format _hint; _timeHint = _timeHint + 5*60
	? _unit distance _target > _range: goto "CheckPosReached"
#PrePareToAttack
	; weapon check
	? !(_unit call _weaponCheck): _unit groupChat ("No proper weapon for " + _text + ". Order Aborted."), goto "EOF"
	_unit groupChat "Target in range. Prepare to attack.";
	; doStop _unit
	_vehicle reveal _target
	_vehicle doTarget _target
	
	_delay = 3
	; Delay for turning the turret. It'll be good to obtain proper value by the angle's difference, however no way to compute this in OFP.
																																														
	~ _delay







#PreCalculate
; 单位移动到位, 且武器检查完毕（弹夹不检查, 因为速度可能需要调整）后, 进行预计算. 所需的空间信息已知, 而弹夹速度还未知. 采用矩阵记录信息的方式, 获取有效弹夹及相应的速度. 
; 预计算如果得不到合适的结果, 则设置弹夹的切换, 或终止命令.

; In OFP no vanilla way to obtain direction of turret. Initial angle is 30° or 60°. In pre-calculating we iterate mostly elevation angle.
_posV = getPosASL _vehicle; _posT = getPosASL _target; _posT set [2, _posT call funcHASL]
_elev = if(_biggerAngle > 0) then "60" else "30"
? _unit distance _target > _range:  goto "CheckDistance"







; for soldier, the _speed is certain value depending on the weapon type. Otherwise obtain _speed from magazine in SQS script.
@ !mutexTzkArtModule
	mutexTzkArtModule = true
	_res = [ [_vehicle, _weapon, ""], _posT, _speed, _elev, _biggerAngle ] call preprocessFile "Common\Art\PreCalcArtInfo.sqf"
	~ 0.1
	mutexTzkArtModule = false
; _res format: [bool acceptable return value, _elev, _speed]
? _res select 0 != 0: _unit groupChat "Target is too " + (["", "far", "high"] select (_res select 0)) + " for this magazine. Use another one with bigger speed please."; goto "EOF"
_elev = _res select 1; _speed = _res select 2
; Calculate turbulence
; 切向简单地用弧长除以半径就能获得方位角的范围; 径向则需要针对修正值做一次迭代, 节省运算量的做法是对于[r,R]的范围, 仅计算r的修正, 将修正量取反作为R的近似值.
_angle = ((_posT select 1) - (_posV select 1)) atan2 ((_posT select 0) - (_posV select 0)); 
_distX = [_posV, _posT] call funcDistH
_angleDelta = (_dispersion/2)/_distX * 180/pi
_thetaDelta = 1
_r0_r1_bH = [_speed * cos(_elev + _thetaDelta), _speed * sin(_elev + _thetaDelta), (_posT call funcHASL) - (_posV select 2), false] call loadFile "Common\EH\RK4_Range_H.sqf"
_error = (_r0_r1_bH select 1) - _distX
? _error != 0: _thetaDelta = _thetaDelta * _dispersion / abs(_error)
_script = "Common\EH\Fired_ReviseAsAssigned.sqs"
; 当载具的位置发生了变化(距离计算使用的位置超出50米), 或目标的位置发生了变化, 或弹夹发生了切换, 需要重新回到试射环节.
; hint format ["%1", [_elev, _speed, _angle, _angleDelta, _thetaDelta]]
	; For TZK customed GL, the "muzzle" using same name as "weapon". Thus unnecessary to worry about GL in TZK. Check it in more general way.
	_magazines = _unit call funcGetNotEmptyMags
	_numOfMagLast = 1 + ("_x in _validMags" count _magazines)
	#AttackCheck
		_posTarget = [getPos _target, 0, _dispersion] call funcGetRandomPos; _posTarget set [2,0]
		? _unit distance _target > _range: goto "PrepareToMove"
		? _biggerAngle > 0: _posH = [_posTarget, getPos _vehicle] call funcVectorSub, _posH set [2,1], _length = _posH call funcVectorLength, _posH = [_posH, 600/_length] call funcVectorScale, _posH set [2, 6*173.2], _posH = [_posH, getPos _vehicle] call funcVectorAdd, _heliH setPos _posH, _vehicle reveal _heliH
		_vehicle reveal (if (_biggerAngle > 0) then "_heliH" else "_target")
		~0.1
		_vehicle doTarget (if (_biggerAngle > 0) then "_heliH" else "_target")
		; Rearm check should be placed in loop below, due to time cost of animation.
		
		; delay must be correctly assigned for "fire" command.
		#WaitUntilReload
		; For soldier weapon, the reload time should be calculated manually, considering the reload animation time cost.
			_delay = _rldTime
			~ _delay
			? call orderCheck: goto "EOF"
			? !(alive _unit) || _vehicle != vehicle _unit: goto "EOF"
			? "_x in _validMags" count _magazines == 0: goto "CheckRearm"
			? bool_TZK_199_Mode: if ("_x in _validMags" count _magazines == 1 && _vehicle ammo _weapon == 0) Then {goto "CheckRearm"}
			
			_magazines = _unit call funcGetNotEmptyMags
			? ("_x in _validMags" count _magazines) >= _numOfMagLast && _unit ammo _weapon < 1: goto "WaitUntilReload"
		_numOfMagLast = "_x in _validMags" count _magazines
		
		? 50 < [_vehicle, _posV] call funcDistH || 50 < [_target, _posT] call funcDistH: goto "PreCalculate"
		; what if magazine changed? sure the elevation will change too.
		
		_ehRev = _vehicle addEventHandler ["Fired",""], _vehicle removeEventHandler ["Fired", _ehRev]
		_vehicle addEventHandler [ "Fired", format [{[_this, %1, %2] exec "%3"}, [_speed, _angle - _angleDelta + _angleDelta*(random 2), _elev - _thetaDelta + _thetaDelta*(random 2)], _ehRev, _script] ]
		[_vehicle, _weapon] call _fireCommand
		goto "AttackDone"
		
		#AttackDone
		~0.1
		if (_biggerAngle > 0) Then "_vehicle doWatch _posH" Else "_vehicle doWatch _posT"
	goto "AttackCheck"
#CheckRearm
	_magData = (_unit call funcGetRearmData) select 1
	_vs = ([getPos _unit, 500, (typesSupport select si0) + (typesSupport select si1) + [(typesMHQ select _si)] +[jeepaW,uazaE], []] call funcGetNearbyVehicles) + ([getPos _unit, 500, [stAmmoCrate, stBarracks], [], _si] call funcGetNearbyStructure) + ([getPos _unit, 500, [stAmmoCrate], [], siEnemy select _si] call funcGetNearbyStructure)
	? count _vs == 0: _unit groupChat "No support vehicle within 500 meters. Magazines exhausted. Order aborted."; goto "EOF"
	_distMin = 500; _sup = objNull
	{ _dist = _unit distance (_x select 0); if (_dist < _distMin) then { _sup = (_x select 0); _distMin = _dist } } foreach _vs
	? isNull _sup: _unit groupChat "No support vehicle near. Magazines exhausted. Order aborted."; goto "EOF"
	_unit groupChat "Moving to support vehicle for more magazines."

	_timeAbort = time + 15*60
	#MoveToSupport
		_posMove = [[0, 5], (getDir _sup)] call funcVectorRot2D
		_posMove = [getPos _sup, _posMove] call funcVectorSub
		_unit doMove _posMove
		~5
		? !(alive _unit) || _unit != vehicle _unit: goto "EOF"
		? call orderCheck: goto "EOF"
		? !(alive _sup): goto "CheckRearm"
		? time > _timeAbort: _unit groupChat "Cost too much time. Unable to reach support vehicle. Order aborted."; goto "EOF"
		? (_unit distance _sup) > 10: goto "MoveToSupport"
	_unit groupChat "Rearming at support vehicle."; [_unit, _sup] exec "Player\Rearm.sqs"; doStop _unit
	#WaitRearmComplete
		~5
		? call orderCheck: goto "EOF"
		? !(alive _unit) || _vehicle != vehicle _unit: goto "EOF"
		? !someAmmo _vehicle: goto "WaitRearmComplete"
	goto "PrepareToMove"

#EOF
PlayerShootingUnits set [_uid, objNull]
? _biggerAngle > 0: deleteVehicle _heliH
exit